========== BINARY FILE (PATH ONLY): ./tickets-fe/public/event-image-2.webp ==========
========== BINARY FILE (PATH ONLY): ./tickets-fe/public/event-image-3.webp ==========
========== BINARY FILE (PATH ONLY): ./tickets-fe/public/event-image-4.webp ==========
========== BINARY FILE (PATH ONLY): ./tickets-fe/public/vite.svg ==========
========== BINARY FILE (PATH ONLY): ./tickets-fe/public/organizers-landing-hero.png ==========
========== BINARY FILE (PATH ONLY): ./tickets-fe/public/event-image-1.webp ==========
========== FILE: ./tickets-fe/package.json ==========
{
  "name": "event-ticket-platform",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "format": "prettier . --write",
    "mocks": "npx json-server db.json",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@radix-ui/react-alert-dialog": "^1.1.14",
    "@radix-ui/react-avatar": "^1.1.9",
    "@radix-ui/react-dialog": "^1.1.13",
    "@radix-ui/react-dropdown-menu": "^2.1.14",
    "@radix-ui/react-label": "^2.1.6",
    "@radix-ui/react-popover": "^1.1.13",
    "@radix-ui/react-select": "^2.2.4",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.4",
    "@tailwindcss/vite": "^4.1.4",
    "@yudiel/react-qr-scanner": "^2.3.1",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^3.6.0",
    "json-server": "^1.0.0-beta.3",
    "jwt-decode": "^4.0.0",
    "lucide-react": "^0.503.0",
    "oidc-client-ts": "^3.2.0",
    "react": "^19.0.0",
    "react-day-picker": "^8.10.1",
    "react-dom": "^19.0.0",
    "react-oidc-context": "^3.3.0",
    "react-router": "^7.5.1",
    "tailwind-merge": "^3.2.0",
    "tailwindcss": "^4.1.4",
    "tw-animate-css": "^1.2.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.22.0",
    "@types/jwt-decode": "^2.2.1",
    "@types/node": "^22.14.1",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react-swc": "^3.8.0",
    "eslint": "^9.22.0",
    "eslint-config-prettier": "^10.1.2",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "prettier": "3.5.3",
    "typescript": "~5.7.2",
    "typescript-eslint": "^8.26.1",
    "vite": "^6.3.1"
  }
}

========== END OF FILE: ./tickets-fe/package.json ==========

========== FILE: ./tickets-fe/tsconfig.json ==========
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}

========== END OF FILE: ./tickets-fe/tsconfig.json ==========

========== FILE: ./tickets-fe/src/main.tsx ==========
// import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import "./index.css";
import AttendeeLandingPage from "./pages/attendee-landing-page.tsx";
import { AuthProvider } from "react-oidc-context";
import { createBrowserRouter, RouterProvider } from "react-router";
import OrganizersLandingPage from "./pages/organizers-landing-page.tsx";
import DashboardManageEventPage from "./pages/dashboard-manage-event-page.tsx";
import LoginPage from "./pages/login-page.tsx";
import ProtectedRoute from "./components/protected-route.tsx";
import CallbackPage from "./pages/callback-page.tsx";
import DashboardListEventsPage from "./pages/dashboard-list-events-page.tsx";
import PublishedEventsPage from "./pages/published-events-page.tsx";
import PurchaseTicketPage from "./pages/purchase-ticket-page.tsx";
import DashboardListTickets from "./pages/dashboard-list-tickets.tsx";
import DashboardPage from "./pages/dashboard-page.tsx";
import DashboardViewTicketPage from "./pages/dashboard-view-ticket-page.tsx";
import DashboardValidateQrPage from "./pages/dashboard-validate-qr-page.tsx";

const router = createBrowserRouter([
  {
    path: "/",
    element: <AttendeeLandingPage />,
  },
  {
    path: "/callback",
    element: <CallbackPage />,
  },
  {
    path: "/login",
    element: <LoginPage />,
  },
  {
    path: "/events/:id",
    element: <PublishedEventsPage />,
  },
  {
    path: "/events/:eventId/purchase/:ticketTypeId",
    element: (
      <ProtectedRoute>
        <PurchaseTicketPage />
      </ProtectedRoute>
    ),
  },
  {
    path: "/organizers",
    element: <OrganizersLandingPage />,
  },
  {
    path: "/dashboard",
    element: (
      <ProtectedRoute>
        <DashboardPage />
      </ProtectedRoute>
    ),
  },
  {
    path: "/dashboard/events",
    element: (
      <ProtectedRoute>
        <DashboardListEventsPage />
      </ProtectedRoute>
    ),
  },
  {
    path: "/dashboard/tickets",
    element: (
      <ProtectedRoute>
        <DashboardListTickets />
      </ProtectedRoute>
    ),
  },
  {
    path: "/dashboard/tickets/:id",
    element: (
      <ProtectedRoute>
        <DashboardViewTicketPage />
      </ProtectedRoute>
    ),
  },
  {
    path: "/dashboard/validate-qr",
    element: (
      <ProtectedRoute>
        <DashboardValidateQrPage />
      </ProtectedRoute>
    ),
  },
  {
    path: "/dashboard/events/create",
    element: (
      <ProtectedRoute>
        <DashboardManageEventPage />
      </ProtectedRoute>
    ),
  },
  {
    path: "/dashboard/events/update/:id",
    element: (
      <ProtectedRoute>
        <DashboardManageEventPage />
      </ProtectedRoute>
    ),
  },
]);

const oidcConfig = {
  authority: "http://localhost:9090/realms/event-ticket-platform",
  client_id: "event-ticket-platform-app",
  redirect_uri: "http://localhost:5173/callback",
};

createRoot(document.getElementById("root")!).render(
  // <StrictMode>
    <AuthProvider {...oidcConfig}>
      <RouterProvider router={router} />
    </AuthProvider>
  // </StrictMode>
);

========== END OF FILE: ./tickets-fe/src/main.tsx ==========

========== FILE: ./tickets-fe/src/index.css ==========
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

========== END OF FILE: ./tickets-fe/src/index.css ==========

========== FILE: ./tickets-fe/src/components/ui/alert-dialog.tsx ==========
import * as React from "react";
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

function AlertDialog({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {
  return <AlertDialogPrimitive.Root data-slot="alert-dialog" {...props} />;
}

function AlertDialogTrigger({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {
  return (
    <AlertDialogPrimitive.Trigger data-slot="alert-dialog-trigger" {...props} />
  );
}

function AlertDialogPortal({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {
  return (
    <AlertDialogPrimitive.Portal data-slot="alert-dialog-portal" {...props} />
  );
}

function AlertDialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {
  return (
    <AlertDialogPrimitive.Overlay
      data-slot="alert-dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className,
      )}
      {...props}
    />
  );
}

function AlertDialogContent({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {
  return (
    <AlertDialogPortal>
      <AlertDialogOverlay />
      <AlertDialogPrimitive.Content
        data-slot="alert-dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className,
        )}
        {...props}
      />
    </AlertDialogPortal>
  );
}

function AlertDialogHeader({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  );
}

function AlertDialogFooter({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className,
      )}
      {...props}
    />
  );
}

function AlertDialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {
  return (
    <AlertDialogPrimitive.Title
      data-slot="alert-dialog-title"
      className={cn("text-lg font-semibold", className)}
      {...props}
    />
  );
}

function AlertDialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {
  return (
    <AlertDialogPrimitive.Description
      data-slot="alert-dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  );
}

function AlertDialogAction({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {
  return (
    <AlertDialogPrimitive.Action
      className={cn(buttonVariants(), className)}
      {...props}
    />
  );
}

function AlertDialogCancel({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {
  return (
    <AlertDialogPrimitive.Cancel
      className={cn(buttonVariants({ variant: "outline" }), className)}
      {...props}
    />
  );
}

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
};

========== END OF FILE: ./tickets-fe/src/components/ui/alert-dialog.tsx ==========

========== FILE: ./tickets-fe/src/components/ui/card.tsx ==========
import * as React from "react";

import { cn } from "@/lib/utils";

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className,
      )}
      {...props}
    />
  );
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className,
      )}
      {...props}
    />
  );
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  );
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  );
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className,
      )}
      {...props}
    />
  );
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  );
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  );
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
};

========== END OF FILE: ./tickets-fe/src/components/ui/card.tsx ==========

========== FILE: ./tickets-fe/src/components/ui/popover.tsx ==========
import * as React from "react";
import * as PopoverPrimitive from "@radix-ui/react-popover";

import { cn } from "@/lib/utils";

function Popover({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Root>) {
  return <PopoverPrimitive.Root data-slot="popover" {...props} />;
}

function PopoverTrigger({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {
  return <PopoverPrimitive.Trigger data-slot="popover-trigger" {...props} />;
}

function PopoverContent({
  className,
  align = "center",
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Content>) {
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        data-slot="popover-content"
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden",
          className,
        )}
        {...props}
      />
    </PopoverPrimitive.Portal>
  );
}

function PopoverAnchor({
  ...props
}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {
  return <PopoverPrimitive.Anchor data-slot="popover-anchor" {...props} />;
}

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor };

========== END OF FILE: ./tickets-fe/src/components/ui/popover.tsx ==========

========== FILE: ./tickets-fe/src/components/ui/label.tsx ==========
import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";

import { cn } from "@/lib/utils";

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className,
      )}
      {...props}
    />
  );
}

export { Label };

========== END OF FILE: ./tickets-fe/src/components/ui/label.tsx ==========

========== FILE: ./tickets-fe/src/components/ui/alert.tsx ==========
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current",
  {
    variants: {
      variant: {
        default: "bg-card text-card-foreground",
        destructive:
          "text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<"div"> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  );
}

function AlertTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        "col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight",
        className,
      )}
      {...props}
    />
  );
}

function AlertDescription({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed",
        className,
      )}
      {...props}
    />
  );
}

export { Alert, AlertTitle, AlertDescription };

========== END OF FILE: ./tickets-fe/src/components/ui/alert.tsx ==========

========== FILE: ./tickets-fe/src/components/ui/switch.tsx ==========
import * as React from "react";
import * as SwitchPrimitive from "@radix-ui/react-switch";

import { cn } from "@/lib/utils";

function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          "bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0",
        )}
      />
    </SwitchPrimitive.Root>
  );
}

export { Switch };

========== END OF FILE: ./tickets-fe/src/components/ui/switch.tsx ==========

========== FILE: ./tickets-fe/src/components/ui/calendar.tsx ==========
import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: React.ComponentProps<typeof DayPicker>) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row gap-2",
        month: "flex flex-col gap-4",
        caption: "flex justify-center pt-1 relative items-center w-full",
        caption_label: "text-sm font-medium",
        nav: "flex items-center gap-1",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "size-7 bg-transparent p-0 opacity-50 hover:opacity-100",
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-x-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range"
            ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
            : "[&:has([aria-selected])]:rounded-md",
        ),
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "size-8 p-0 font-normal aria-selected:opacity-100",
        ),
        day_range_start:
          "day-range-start aria-selected:bg-primary aria-selected:text-primary-foreground",
        day_range_end:
          "day-range-end aria-selected:bg-primary aria-selected:text-primary-foreground",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("size-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("size-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  );
}

export { Calendar };

========== END OF FILE: ./tickets-fe/src/components/ui/calendar.tsx ==========

========== FILE: ./tickets-fe/src/components/ui/avatar.tsx ==========
import * as React from "react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";

import { cn } from "@/lib/utils";

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className,
      )}
      {...props}
    />
  );
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  );
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className,
      )}
      {...props}
    />
  );
}

export { Avatar, AvatarImage, AvatarFallback };

========== END OF FILE: ./tickets-fe/src/components/ui/avatar.tsx ==========

========== FILE: ./tickets-fe/src/components/ui/dialog.tsx ==========
import * as React from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { XIcon } from "lucide-react";

import { cn } from "@/lib/utils";

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />;
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />;
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />;
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />;
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className,
      )}
      {...props}
    />
  );
}

function DialogContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content>) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className,
        )}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  );
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  );
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className,
      )}
      {...props}
    />
  );
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  );
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  );
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
};

========== END OF FILE: ./tickets-fe/src/components/ui/dialog.tsx ==========

========== FILE: ./tickets-fe/src/components/ui/badge.tsx ==========
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span";

  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  );
}

export { Badge, badgeVariants };

========== END OF FILE: ./tickets-fe/src/components/ui/badge.tsx ==========

========== FILE: ./tickets-fe/src/components/ui/button.tsx ==========
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean;
  }) {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  );
}

export { Button, buttonVariants };

========== END OF FILE: ./tickets-fe/src/components/ui/button.tsx ==========

========== FILE: ./tickets-fe/src/components/ui/dropdown-menu.tsx ==========
import * as React from "react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react";

import { cn } from "@/lib/utils";

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />;
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  );
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  );
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className,
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  );
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  );
}

function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean;
  variant?: "default" | "destructive";
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    />
  );
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  );
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  );
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  );
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean;
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className,
      )}
      {...props}
    />
  );
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  );
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className,
      )}
      {...props}
    />
  );
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />;
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean;
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className,
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  );
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className,
      )}
      {...props}
    />
  );
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
};

========== END OF FILE: ./tickets-fe/src/components/ui/dropdown-menu.tsx ==========

========== FILE: ./tickets-fe/src/components/ui/select.tsx ==========
import * as React from "react";
import * as SelectPrimitive from "@radix-ui/react-select";
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react";

import { cn } from "@/lib/utils";

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />;
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />;
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />;
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default";
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  );
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className,
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1",
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  );
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  );
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className,
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  );
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  );
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className,
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  );
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className,
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  );
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
};

========== END OF FILE: ./tickets-fe/src/components/ui/select.tsx ==========

========== FILE: ./tickets-fe/src/components/ui/textarea.tsx ==========
import * as React from "react";

import { cn } from "@/lib/utils";

function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className,
      )}
      {...props}
    />
  );
}

export { Textarea };

========== END OF FILE: ./tickets-fe/src/components/ui/textarea.tsx ==========

========== FILE: ./tickets-fe/src/components/ui/input.tsx ==========
import * as React from "react";

import { cn } from "@/lib/utils";

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className,
      )}
      {...props}
    />
  );
}

export { Input };

========== END OF FILE: ./tickets-fe/src/components/ui/input.tsx ==========

========== FILE: ./tickets-fe/src/components/protected-route.tsx ==========
import { ReactNode } from "react";
import { useAuth } from "react-oidc-context";
import { Navigate, useLocation } from "react-router";

interface ProtectedRouteProperties {
  children: ReactNode;
}

const ProtectedRoute: React.FC<ProtectedRouteProperties> = ({ children }) => {
  const { isLoading, isAuthenticated } = useAuth();
  const location = useLocation();

  if (isLoading) {
    return <p>Loading...</p>;
  }

  if (!isAuthenticated) {
    localStorage.setItem(
      "redirectPath",
      globalThis.location.pathname + globalThis.location.search,
    );
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  return children;
};

export default ProtectedRoute;

========== END OF FILE: ./tickets-fe/src/components/protected-route.tsx ==========

========== FILE: ./tickets-fe/src/components/nav-bar.tsx ==========
import { useAuth } from "react-oidc-context";
import { Avatar, AvatarFallback } from "./ui/avatar";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "./ui/dropdown-menu";
import { LogOut } from "lucide-react";
import { useRoles } from "@/hooks/use-roles";
import { Link } from "react-router";

const NavBar: React.FC = () => {
  const { user, signoutRedirect } = useAuth();
  const { isOrganizer } = useRoles();

  return (
    <div className="bg-gray-950 border-b border-gray-800 text-white">
      <div className="container mx-auto p-4">
        <div className="flex justify-between items-center">
          <div className="flex gap-10 md:gap-20 items-center">
            <h1 className="text-xl font-bold">Event Ticket Platform</h1>
            <div className="text-gray-300 flex gap-8">
              {isOrganizer && <Link to="/dashboard/events">Events</Link>}
              <Link to="/dashboard/tickets">Tickets</Link>
            </div>
          </div>

          <DropdownMenu>
            <DropdownMenuTrigger>
              <Avatar className="h-8 w-8">
                <AvatarFallback className="bg-gray-700">
                  {user?.profile?.preferred_username?.slice(0, 2).toUpperCase()}
                </AvatarFallback>
              </Avatar>
            </DropdownMenuTrigger>
            <DropdownMenuContent
              className="w-56 bg-gray-900 border-gray-700 text-white"
              align="end"
            >
              <DropdownMenuLabel className="font-normal">
                <p className="text-sm font-medium">
                  {user?.profile?.preferred_username}
                </p>
                <p className="text-sm text-gray-400">{user?.profile?.email}</p>
              </DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                className="hover:bg-gray-800"
                onClick={() => signoutRedirect()}
              >
                <LogOut />
                <span>Log Out</span>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
    </div>
  );
};

export default NavBar;

========== END OF FILE: ./tickets-fe/src/components/nav-bar.tsx ==========

========== BINARY FILE (PATH ONLY): ./tickets-fe/src/components/random-event-image.tsx ==========
========== FILE: ./tickets-fe/src/components/simple-pagination.tsx ==========
import { SpringBootPagination } from "@/domain/domain";
import { Button } from "./ui/button";
import { ChevronLeft, ChevronRight } from "lucide-react";

interface SimplePaginationProps<T> {
  pagination: SpringBootPagination<T>;
  onPageChange: (page: number) => void;
}

export function SimplePagination<T>({
  pagination,
  onPageChange,
}: React.FC<SimplePaginationProps<T>>) {
  const currentPage = pagination.number;
  const totalPages = pagination.totalPages;

  return (
    <div className="flex gap-2 items-center">
      <Button
        size="sm"
        className="cursor-pointer"
        onClick={() => onPageChange(currentPage - 1)}
        disabled={pagination.first}
      >
        <ChevronLeft className="h-4 w-4" />
        <span className="sr-only">Previous Page</span>
      </Button>
      <div className="text-sm">
        Page {currentPage + 1} of {totalPages}
      </div>
      <Button
        size="sm"
        className="cursor-pointer"
        onClick={() => onPageChange(currentPage + 1)}
        disabled={pagination.last}
      >
        <ChevronRight className="h-4 w-4" />
        <span className="sr-only">Next Page</span>
      </Button>
    </div>
  );
}

========== END OF FILE: ./tickets-fe/src/components/simple-pagination.tsx ==========

========== FILE: ./tickets-fe/src/components/published-event-card.tsx ==========
import { PublishedEventSummary } from "@/domain/domain";
import { Card } from "./ui/card";
import { Calendar, Heart, MapPin, Share2 } from "lucide-react";
import { format } from "date-fns";
import { Link } from "react-router";
import RandomEventImage from "./random-event-image";

interface PublishedEventCardProperties {
  publishedEvent: PublishedEventSummary;
}

const PublishedEventCard: React.FC<PublishedEventCardProperties> = ({
  publishedEvent,
}) => {
  return (
    <Link to={`/events/${publishedEvent.id}`}>
      <Card className="py-0 overflow-hidden max-w-[240px] gap-2">
        {/* Card Image */}
        <div className="h-[140px]">
          <RandomEventImage />
        </div>
        <div className="px-2">
          <h3 className="text-lg font-medium">{publishedEvent.name}</h3>
        </div>
        <div className="px-2">
          <div className="flex gap-2 text-sm mb-2 text-gray-500">
            <MapPin className="w-5" /> {publishedEvent.venue}
          </div>
          <div className="flex gap-2 text-sm mb-2 text-gray-500">
            {publishedEvent.start && publishedEvent.end ? (
              <div className="flex gap-2">
                <Calendar className="w-5" />{" "}
                {format(publishedEvent.start, "PP")} -{" "}
                {format(publishedEvent.end, "PP")}
              </div>
            ) : (
              <div className="flex gap-2">
                <Calendar />
                Dates TBD
              </div>
            )}
          </div>
          <div className="flex justify-between p-2 border-t text-gray-500">
            <button className="cursor-pointer">
              <Heart />
            </button>
            <button className="cursor-pointer">
              <Share2 />
            </button>
          </div>
        </div>
      </Card>
    </Link>
  );
};

export default PublishedEventCard;

========== END OF FILE: ./tickets-fe/src/components/published-event-card.tsx ==========

========== FILE: ./tickets-fe/src/vite-env.d.ts ==========
/// <reference types="vite/client" />

========== END OF FILE: ./tickets-fe/src/vite-env.d.ts ==========

========== FILE: ./tickets-fe/src/hooks/use-roles.tsx ==========
import { useEffect, useState } from "react";
import { useAuth } from "react-oidc-context";
import { jwtDecode } from "jwt-decode";

interface UseRolesReturn {
  isLoading: boolean;
  roles: string[];
  isOrganizer: boolean;
  isAttendee: boolean;
  isStaff: boolean;
}

interface JwtPayload {
  realm_access?: {
    roles?: string[];
  };
}

export const useRoles = (): UseRolesReturn => {
  const { isLoading: isAuthLoading, user } = useAuth();
  const [isLoading, setIsLoading] = useState(true);
  const [roles, setRoles] = useState<string[]>([]);
  const [isOrganizer, setIsOrganizer] = useState(false);
  const [isAttendee, setIsAttendee] = useState(false);
  const [isStaff, setIsStaff] = useState(false);

  useEffect(() => {
    setIsLoading(true);

    if (isAuthLoading || !user?.access_token) {
      setRoles([]);
      setIsOrganizer(false);
      setIsAttendee(false);
      setIsStaff(false);
      setIsLoading(isAuthLoading);
      return;
    }

    try {
      const payload = jwtDecode<JwtPayload>(user?.access_token);
      const allRoles = payload.realm_access?.roles || [];
      const filteredRoles = allRoles.filter((role) => role.startsWith("ROLE_"));
      setRoles(filteredRoles);
      setIsOrganizer(filteredRoles.includes("ROLE_ORGANIZER"));
      setIsAttendee(filteredRoles.includes("ROLE_ATTENDEE"));
      setIsStaff(filteredRoles.includes("ROLE_STAFF"));
    } catch (error) {
      console.error("Error parsing JWT: " + error);
      setRoles([]);
      setIsOrganizer(false);
      setIsAttendee(false);
      setIsStaff(false);
    } finally {
      setIsLoading(false);
    }
  }, [isAuthLoading, user?.access_token]);

  return {
    isLoading,
    roles,
    isOrganizer,
    isAttendee,
    isStaff,
  };
};

========== END OF FILE: ./tickets-fe/src/hooks/use-roles.tsx ==========

========== FILE: ./tickets-fe/src/lib/utils.ts ==========
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

========== END OF FILE: ./tickets-fe/src/lib/utils.ts ==========

========== FILE: ./tickets-fe/src/lib/api.ts ==========
import {
  CreateEventRequest,
  EventDetails,
  EventSummary,
  isErrorResponse,
  PublishedEventDetails,
  PublishedEventSummary,
  SpringBootPagination,
  TicketDetails,
  TicketSummary,
  TicketValidationRequest,
  TicketValidationResponse,
  UpdateEventRequest,
} from "@/domain/domain";

export const createEvent = async (
  accessToken: string,
  request: CreateEventRequest,
): Promise<void> => {
  const response = await fetch("/api/v1/events", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify(request),
  });

  const responseBody = await response.json();

  if (!response.ok) {
    if (isErrorResponse(responseBody)) {
      throw new Error(responseBody.error);
    } else {
      console.error(JSON.stringify(responseBody));
      throw new Error("An unknown error occurred");
    }
  }
};

export const updateEvent = async (
  accessToken: string,
  id: string,
  request: UpdateEventRequest,
): Promise<void> => {
  const response = await fetch(`/api/v1/events/${id}`, {
    method: "PUT",
    headers: {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify(request),
  });

  const responseBody = await response.json();

  if (!response.ok) {
    if (isErrorResponse(responseBody)) {
      throw new Error(responseBody.error);
    } else {
      console.error(JSON.stringify(responseBody));
      throw new Error("An unknown error occurred");
    }
  }
};

export const listEvents = async (
  accessToken: string,
  page: number,
): Promise<SpringBootPagination<EventSummary>> => {
  const response = await fetch(`/api/v1/events?page=${page}&size=2`, {
    method: "GET",
    headers: {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json",
    },
  });

  const responseBody = await response.json();

  if (!response.ok) {
    if (isErrorResponse(responseBody)) {
      throw new Error(responseBody.error);
    } else {
      console.error(JSON.stringify(responseBody));
      throw new Error("An unknown error occurred");
    }
  }

  return responseBody as SpringBootPagination<EventSummary>;
};

export const getEvent = async (
  accessToken: string,
  id: string,
): Promise<EventDetails> => {
  const response = await fetch(`/api/v1/events/${id}`, {
    method: "GET",
    headers: {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json",
    },
  });

  const responseBody = await response.json();

  if (!response.ok) {
    if (isErrorResponse(responseBody)) {
      throw new Error(responseBody.error);
    } else {
      console.error(JSON.stringify(responseBody));
      throw new Error("An unknown error occurred");
    }
  }

  return responseBody as EventDetails;
};

export const deleteEvent = async (
  accessToken: string,
  id: string,
): Promise<void> => {
  const response = await fetch(`/api/v1/events/${id}`, {
    method: "DELETE",
    headers: {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json",
    },
  });

  if (!response.ok) {
    const responseBody = await response.json();
    if (isErrorResponse(responseBody)) {
      throw new Error(responseBody.error);
    } else {
      console.error(JSON.stringify(responseBody));
      throw new Error("An unknown error occurred");
    }
  }
};

export const listPublishedEvents = async (
  page: number,
): Promise<SpringBootPagination<PublishedEventSummary>> => {
  const response = await fetch(`/api/v1/published-events?page=${page}&size=4`, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
    },
  });

  const responseBody = await response.json();

  if (!response.ok) {
    if (isErrorResponse(responseBody)) {
      throw new Error(responseBody.error);
    } else {
      console.error(JSON.stringify(responseBody));
      throw new Error("An unknown error occurred");
    }
  }

  return responseBody as SpringBootPagination<PublishedEventSummary>;
};

export const searchPublishedEvents = async (
  query: string,
  page: number,
): Promise<SpringBootPagination<PublishedEventSummary>> => {
  const response = await fetch(
    `/api/v1/published-events?q=${query}&page=${page}&size=4`,
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    },
  );

  const responseBody = await response.json();

  if (!response.ok) {
    if (isErrorResponse(responseBody)) {
      throw new Error(responseBody.error);
    } else {
      console.error(JSON.stringify(responseBody));
      throw new Error("An unknown error occurred");
    }
  }

  return responseBody as SpringBootPagination<PublishedEventSummary>;
};

export const getPublishedEvent = async (
  id: string,
): Promise<PublishedEventDetails> => {
  const response = await fetch(`/api/v1/published-events/${id}`, {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
    },
  });

  const responseBody = await response.json();

  if (!response.ok) {
    if (isErrorResponse(responseBody)) {
      throw new Error(responseBody.error);
    } else {
      console.error(JSON.stringify(responseBody));
      throw new Error("An unknown error occurred");
    }
  }

  return responseBody as PublishedEventDetails;
};

export const purchaseTicket = async (
  accessToken: string,
  eventId: string,
  ticketTypeId: string,
): Promise<void> => {
  const response = await fetch(
    `/api/v1/events/${eventId}/ticket-types/${ticketTypeId}/tickets`,
    {
      method: "POST",
      headers: {
        Authorization: `Bearer ${accessToken}`,
        "Content-Type": "application/json",
      },
    },
  );

  if (!response.ok) {
    const responseBody = await response.json();
    if (isErrorResponse(responseBody)) {
      throw new Error(responseBody.error);
    } else {
      console.error(JSON.stringify(responseBody));
      throw new Error("An unknown error occurred");
    }
  }
};

export const listTickets = async (
  accessToken: string,
  page: number,
): Promise<SpringBootPagination<TicketSummary>> => {
  const response = await fetch(`/api/v1/tickets?page=${page}&size=8`, {
    method: "GET",
    headers: {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json",
    },
  });

  const responseBody = await response.json();

  if (!response.ok) {
    if (isErrorResponse(responseBody)) {
      throw new Error(responseBody.error);
    } else {
      console.error(JSON.stringify(responseBody));
      throw new Error("An unknown error occurred");
    }
  }

  return responseBody as SpringBootPagination<TicketSummary>;
};

export const getTicket = async (
  accessToken: string,
  id: string,
): Promise<TicketDetails> => {
  const response = await fetch(`/api/v1/tickets/${id}`, {
    method: "GET",
    headers: {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json",
    },
  });

  const responseBody = await response.json();

  if (!response.ok) {
    if (isErrorResponse(responseBody)) {
      throw new Error(responseBody.error);
    } else {
      console.error(JSON.stringify(responseBody));
      throw new Error("An unknown error occurred");
    }
  }

  return responseBody as TicketDetails;
};

export const getTicketQr = async (
  accessToken: string,
  id: string,
): Promise<Blob> => {
  const response = await fetch(`/api/v1/tickets/${id}/qr-codes`, {
    method: "GET",
    headers: {
      Authorization: `Bearer ${accessToken}`,
    },
  });

  if (response.ok) {
    return await response.blob();
  } else {
    throw new Error("Unable to get ticket QR code");
  }
};

export const validateTicket = async (
  accessToken: string,
  request: TicketValidationRequest,
): Promise<TicketValidationResponse> => {
  const response = await fetch(`/api/v1/ticket-validations`, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify(request),
  });

  const responseBody = await response.json();

  if (!response.ok) {
    if (isErrorResponse(responseBody)) {
      throw new Error(responseBody.error);
    } else {
      console.error(JSON.stringify(responseBody));
      throw new Error("An unknown error occurred");
    }
  }

  return responseBody as Promise<TicketValidationResponse>;
};

========== END OF FILE: ./tickets-fe/src/lib/api.ts ==========

========== BINARY FILE (PATH ONLY): ./tickets-fe/src/assets/react.svg ==========
========== FILE: ./tickets-fe/src/pages/dashboard-list-events-page.tsx ==========
import NavBar from "@/components/nav-bar";
import { SimplePagination } from "@/components/simple-pagination";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
} from "@/components/ui/card";
import {
  EventSummary,
  EventStatusEnum,
  SpringBootPagination,
} from "@/domain/domain";
import { deleteEvent, listEvents } from "@/lib/api";
import {
  AlertCircle,
  Calendar,
  Clock,
  Edit,
  MapPin,
  Tag,
  Trash,
} from "lucide-react";
import { useEffect, useState } from "react";
import { useAuth } from "react-oidc-context";
import { Link } from "react-router";

const DashboardListEventsPage: React.FC = () => {
  const { isLoading, user } = useAuth();
  const [events, setEvents] = useState<
    SpringBootPagination<EventSummary> | undefined
  >();
  const [error, setError] = useState<string | undefined>();
  const [deleteEventError, setDeleteEventError] = useState<
    string | undefined
  >();

  const [page, setPage] = useState(0);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [eventToDelete, setEventToDelete] = useState<
    EventSummary | undefined
  >();

  useEffect(() => {
    if (isLoading || !user?.access_token) {
      return;
    }
    refreshEvents(user.access_token);
  }, [isLoading, user, page]);

  const refreshEvents = async (accessToken: string) => {
    try {
      setEvents(await listEvents(accessToken, page));
    } catch (err) {
      if (err instanceof Error) {
        setError(err.message);
      } else if (typeof err === "string") {
        setError(err);
      } else {
        setError("An unknown error has occurred");
      }
    }
  };

  const formatDate = (date?: Date) => {
    if (!date) {
      return "TBD";
    }
    return new Date(date).toLocaleDateString("en-US", {
      day: "numeric",
      month: "short",
      year: "numeric",
    });
  };

  const formatTime = (date?: Date) => {
    if (!date) {
      return "";
    }
    return new Date(date).toLocaleTimeString("en-US", {
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const formatStatusBadge = (status: EventStatusEnum) => {
    switch (status) {
      case EventStatusEnum.DRAFT:
        return "bg-gray-700 text-gray-200";
      case EventStatusEnum.PUBLISHED:
        return "bg-green-700 text-green-100";
      case EventStatusEnum.CANCELLED:
        return "bg-red-700 text-red-100";
      case EventStatusEnum.COMPLETED:
        return "bg-blue-700 text-blue-100";
      default:
        return "bg-gray-700 text-gray-200";
    }
  };

  const handleOpenDeleteEventDialog = (eventToDelete: EventSummary) => {
    setEventToDelete(undefined);
    setEventToDelete(eventToDelete);
    setDialogOpen(true);
  };

  const handleCancelDeleteEventDialog = () => {
    setEventToDelete(undefined);
    setEventToDelete(undefined);
    setDialogOpen(false);
  };

  const handleDeleteEvent = async () => {
    if (!eventToDelete || isLoading || !user?.access_token) {
      return;
    }

    try {
      setDeleteEventError(undefined);
      await deleteEvent(user.access_token, eventToDelete.id);
      setEventToDelete(undefined);
      setDialogOpen(false);
      refreshEvents(user.access_token);
    } catch (err) {
      if (err instanceof Error) {
        setDeleteEventError(err.message);
      } else if (typeof err === "string") {
        setDeleteEventError(err);
      } else {
        setDeleteEventError("An unknown error has occurred");
      }
    }
  };

  if (error) {
    return (
      <div className="min-h-screen bg-black text-white">
        <Alert variant="destructive" className="bg-gray-900 border-red-700">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      </div>
    );
  }

  return (
    <div className="bg-black min-h-screen text-white">
      <NavBar />

      <div className="max-w-lg mx-auto px-4">
        {/* Title */}
        <div className="py-8 px-4 flex justify-between">
          <div>
            <h1 className="text-2xl font-bold">Your Events</h1>
            <p>Events you have created</p>
          </div>
          <div>
            <Link to="/dashboard/events/create">
              <Button className="bg-purple-700 hover:bg-purple-500 cursor-pointer">
                Create Event
              </Button>
            </Link>
          </div>
        </div>

        {/* Event Cards */}
        <div className="space-y-2">
          {events?.content.map((eventItem) => (
            <Card className="bg-gray-900 border-gray-700 text-white">
              <CardHeader>
                <div className="flex justify-between">
                  <h3 className="font-bold text-xl">{eventItem.name}</h3>
                  <span
                    className={`flex items-center px-2 py-1 rounded-lg text-xs ${formatStatusBadge(eventItem.status)}`}
                  >
                    {eventItem.status}
                  </span>
                </div>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* Event Start & End */}
                <div className="flex space-x-2">
                  <Calendar className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="font-medium">
                      {formatDate(eventItem.start)} to{" "}
                      {formatDate(eventItem.end)}
                    </p>
                    <p className="text-gray-400">
                      {formatTime(eventItem.start)} -{" "}
                      {formatTime(eventItem.end)}
                    </p>
                  </div>
                </div>
                {/* Sales start and end */}
                <div className="flex space-x-2">
                  <Clock className="h-5 w-5 text-gray-400" />
                  <div>
                    <h4 className="font-medium">Sales Period</h4>
                    <p className="text-gray-400">
                      {formatDate(eventItem.salesStart)} to{" "}
                      {formatDate(eventItem.salesEnd)}
                    </p>
                  </div>
                </div>
                <div className="flex space-x-2">
                  <MapPin className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="font-medium">{eventItem.venue}</p>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  <Tag className="h-5 w-5 text-gray-400" />
                  <div>
                    <h4 className="font-medium">Ticket Types</h4>
                    <ul>
                      {eventItem.ticketTypes.map((ticketType) => (
                        <li
                          key={ticketType.id}
                          className="flex gap-2 text-gray-400"
                        >
                          <span>{ticketType.name}</span>
                          <span>${ticketType.price}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                </div>
              </CardContent>
              <CardFooter className="flex justify-end gap-2">
                <Link to={`/dashboard/events/update/${eventItem.id}`}>
                  <Button
                    type="button"
                    className="bg-gray-700 hover:bg-gray-500 cursor-pointer"
                  >
                    <Edit />
                  </Button>
                </Link>
                <Button
                  type="button"
                  className="bg-red-700/80 hover:bg-red-500 cursor-pointer"
                  onClick={() => handleOpenDeleteEventDialog(eventItem)}
                >
                  <Trash />
                </Button>
              </CardFooter>
            </Card>
          ))}
        </div>
      </div>
      <div className="flex justify-center py-8">
        {events && (
          <SimplePagination pagination={events} onPageChange={setPage} />
        )}
      </div>
      <AlertDialog open={dialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This will delete your event '{eventToDelete?.name}' and cannot be
              undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          {deleteEventError && (
            <Alert variant="destructive" className="border-red-700">
              <AlertCircle className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>{deleteEventError}</AlertDescription>
            </Alert>
          )}
          <AlertDialogFooter>
            <AlertDialogCancel onClick={handleCancelDeleteEventDialog}>
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction onClick={() => handleDeleteEvent()}>
              Continue
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
};

export default DashboardListEventsPage;

========== END OF FILE: ./tickets-fe/src/pages/dashboard-list-events-page.tsx ==========

========== FILE: ./tickets-fe/src/pages/dashboard-page.tsx ==========
import { useRoles } from "@/hooks/use-roles";
import { useNavigate } from "react-router";

const DashboardPage: React.FC = () => {
  const { isLoading, isOrganizer, isStaff } = useRoles();
  const navigate = useNavigate();

  if (isLoading) {
    <p>Loading...</p>;
  }

  if (isOrganizer) {
    navigate("/dashboard/events");
    return;
  }

  if (isStaff) {
    navigate("/dashboard/validate-qr");
    return;
  }

  navigate("/dashboard/tickets");

  return <p>Loading...</p>;
};

export default DashboardPage;

========== END OF FILE: ./tickets-fe/src/pages/dashboard-page.tsx ==========

========== FILE: ./tickets-fe/src/pages/dashboard-validate-qr-page.tsx ==========
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useState } from "react";
import { Scanner } from "@yudiel/react-qr-scanner";
import {
  TicketValidationMethod,
  TicketValidationStatus,
} from "@/domain/domain";
import { AlertCircle, Check, X } from "lucide-react";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { validateTicket } from "@/lib/api";
import { useAuth } from "react-oidc-context";

const DashboardValidateQrPage: React.FC = () => {
  const { isLoading, user } = useAuth();
  const [isManual, setIsManual] = useState(false);
  const [data, setData] = useState<string | undefined>();
  const [error, setError] = useState<string | undefined>();
  const [validationStatus, setValidationStatus] = useState<
    TicketValidationStatus | undefined
  >();

  const handleReset = () => {
    setIsManual(false);
    setData(undefined);
    setError(undefined);
    setValidationStatus(undefined);
  };

  const handleError = (err: unknown) => {
    if (err instanceof Error) {
      setError(err.message);
    } else if (typeof err === "string") {
      setError(err);
    } else {
      setError("An unknown error occurred");
    }
  };

  const handleValidate = async (id: string, method: TicketValidationMethod) => {
    if (!user?.access_token) {
      return;
    }
    try {
      const response = await validateTicket(user.access_token, {
        id,
        method,
      });
      setValidationStatus(response.status);
    } catch (err) {
      handleError(err);
    }
  };

  if (isLoading || !user?.access_token) {
    <p>Loading...</p>;
  }

  return (
    <div className="min-h-screen bg-black text-white flex justify-center items-center">
      <div
        className="border border-gray-400 max-w-sm
w-full p-4"
      >
        {error && (
          <div className="min-h-screen bg-black text-white">
            <Alert variant="destructive" className="bg-gray-900 border-red-700">
              <AlertCircle className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          </div>
        )}
        {/* Scanner Viewport */}
        <div className="rounded-lg overflow-hidden mx-auto mb-8 relative">
          <Scanner
            key={`scanner-${data}-${validationStatus}`}
            onScan={(result) => {
              if (result) {
                const qrCodeId = result[0].rawValue;
                setData(qrCodeId);
                handleValidate(qrCodeId, TicketValidationMethod.QR_SCAN);
              }
            }}
            onError={handleError}
          />

          {validationStatus && (
            <div className="absolute inset-0 flex items-center justify-center">
              {validationStatus === TicketValidationStatus.VALID ? (
                <div className="bg-green-500 rounded-full p-4">
                  <Check className="w-20 h-20" />
                </div>
              ) : (
                <div className="bg-red-500 rounded-full p-4">
                  <X className="w-20 h-20" />
                </div>
              )}
            </div>
          )}
        </div>

        {isManual ? (
          <div className="pb-8">
            <Input
              className="w-full text-white text-lg mb-8"
              onChange={(e) => setData(e.target.value)}
            />
            <Button
              className="bg-purple-500 w-full h-[80px] hover:bg-purple-800"
              onClick={() =>
                handleValidate(data || "", TicketValidationMethod.MANUAL)
              }
            >
              Submit
            </Button>
          </div>
        ) : (
          <div>
            <div className="border-white border-2 h-12 rounded-md font-mono flex justify-center items-center">
              <span>{data || "Scan for Result"}</span>
            </div>
            <Button
              className="bg-gray-900 hover:bg-gray-600 border-gray-500 border-2 w-full h-[80px] text-xl my-8"
              onClick={() => setIsManual(true)}
            >
              Manual
            </Button>
          </div>
        )}

        <Button
          className="bg-gray-500 hover:bg-gray-800 w-full h-[80px] text-xl my-8"
          onClick={handleReset}
        >
          Reset
        </Button>
      </div>
    </div>
  );
};

export default DashboardValidateQrPage;

========== END OF FILE: ./tickets-fe/src/pages/dashboard-validate-qr-page.tsx ==========

========== FILE: ./tickets-fe/src/pages/dashboard-manage-event-page.tsx ==========
import NavBar from "@/components/nav-bar";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { Textarea } from "@/components/ui/textarea";
import {
  CreateEventRequest,
  CreateTicketTypeRequest,
  EventDetails,
  EventStatusEnum,
  UpdateEventRequest,
  UpdateTicketTypeRequest,
} from "@/domain/domain";
import { createEvent, getEvent, updateEvent } from "@/lib/api";
import { format } from "date-fns";
import {
  AlertCircle,
  CalendarIcon,
  Edit,
  Plus,
  Ticket,
  Trash,
} from "lucide-react";
import { useEffect, useState } from "react";
import { useAuth } from "react-oidc-context";
import { useNavigate, useParams } from "react-router";

interface DateTimeSelectProperties {
  date: Date | undefined;
  setDate: (date: Date) => void;
  time: string | undefined;
  setTime: (time: string) => void;
  enabled: boolean;
  setEnabled: (isEnabled: boolean) => void;
}

const DateTimeSelect: React.FC<DateTimeSelectProperties> = ({
  date,
  setDate,
  time,
  setTime,
  enabled,
  setEnabled,
}) => {
  return (
    <div className="flex gap-2 items-center">
      <Switch checked={enabled} onCheckedChange={setEnabled} />

      {enabled && (
        <div className="w-full flex gap-2">
          {/* Date */}
          <Popover>
            <PopoverTrigger asChild>
              <Button className="bg-gray-900 border-gray-700 border">
                <CalendarIcon />
                {date ? format(date, "PPP") : <span>Pick a Date</span>}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0" align="start">
              <Calendar
                mode="single"
                selected={date}
                onSelect={(selectedDate) => {
                  if (!selectedDate) {
                    return;
                  }
                  const displayedYear = selectedDate.getFullYear();
                  const displayedMonth = selectedDate.getMonth();
                  const displayedDay = selectedDate.getDate();

                  const correctedDate = new Date(
                    Date.UTC(displayedYear, displayedMonth, displayedDay),
                  );

                  setDate(correctedDate);
                }}
                className="rounded-md border shadow"
              />
            </PopoverContent>
          </Popover>
          {/* Time */}
          <div className="flex gap-2 items-center">
            <Input
              type="time"
              className="w-[90px] bg-gray-900 text-white border-gray-700 border [&::-webkit-calendar-picker-indicator]:invert"
              value={time}
              onChange={(e) => setTime(e.target.value)}
            />
          </div>
        </div>
      )}
    </div>
  );
};

const generateTempId = () => `temp_${crypto.randomUUID()}`;
const isTempId = (id: string | undefined) => id && id.startsWith("temp_");

interface TicketTypeData {
  id: string | undefined;
  name: string;
  price: number;
  totalAvailable?: number;
  description: string;
}

interface EventData {
  id: string | undefined;
  name: string;
  startDate: Date | undefined;
  startTime: string | undefined;
  endDate: Date | undefined;
  endTime: string | undefined;
  venueDetails: string;
  salesStartDate: Date | undefined;
  salesStartTime: string | undefined;
  salesEndDate: Date | undefined;
  salesEndTime: string | undefined;
  ticketTypes: TicketTypeData[];
  status: EventStatusEnum;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

const DashboardManageEventPage: React.FC = () => {
  const { isLoading, user } = useAuth();
  const { id } = useParams();
  const isEditMode = !!id;
  const navigate = useNavigate();

  const [eventData, setEventData] = useState<EventData>({
    id: undefined,
    name: "",
    startDate: undefined,
    startTime: undefined,
    endDate: undefined,
    endTime: undefined,
    venueDetails: "",
    salesStartDate: undefined,
    salesStartTime: undefined,
    salesEndDate: undefined,
    salesEndTime: undefined,
    ticketTypes: [],
    status: EventStatusEnum.DRAFT,
    createdAt: undefined,
    updatedAt: undefined,
  });

  const [currentTicketType, setCurrentTicketType] = useState<
    TicketTypeData | undefined
  >();

  const [dialogOpen, setDialogOpen] = useState(false);

  const [eventDateEnabled, setEventDateEnabled] = useState(false);
  const [eventSalesDateEnabled, setEventSalesDateEnabled] = useState(false);

  const [error, setError] = useState<string | undefined>();

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const updateField = (field: keyof EventData, value: any) => {
    setEventData((prev) => ({ ...prev, [field]: value }));
  };

  useEffect(() => {
    if (isEditMode && !isLoading && user?.access_token) {
      const fetchEvent = async () => {
        const event: EventDetails = await getEvent(user.access_token, id);
        setEventData({
          id: event.id,
          name: event.name,
          startDate: event.start,
          startTime: event.start
            ? formatTimeFromDate(new Date(event.start))
            : undefined,
          endDate: event.end,
          endTime: event.end
            ? formatTimeFromDate(new Date(event.end))
            : undefined,
          venueDetails: event.venue,
          salesStartDate: event.salesStart,
          salesStartTime: event.salesStart
            ? formatTimeFromDate(new Date(event.salesStart))
            : undefined,
          salesEndDate: event.salesEnd,
          salesEndTime: event.salesEnd
            ? formatTimeFromDate(new Date(event.salesEnd))
            : undefined,
          status: event.status,
          ticketTypes: event.ticketTypes.map((ticket) => ({
            id: ticket.id,
            name: ticket.name,
            description: ticket.description,
            price: ticket.price,
            totalAvailable: ticket.totalAvailable,
          })),
          createdAt: event.createdAt,
          updatedAt: event.updatedAt,
        });
        setEventDateEnabled(!!(event.start || event.end));
        setEventSalesDateEnabled(!!(event.salesStart || event.salesEnd));
      };
      fetchEvent();
    }
  }, [id, user]);

  const formatTimeFromDate = (date: Date): string => {
    const hours = date.getHours().toString().padStart(2, "0");
    const minutes = date.getMinutes().toString().padStart(2, "0");
    return `${hours}:${minutes}`;
  };

  const combineDateTime = (date: Date, time: string): Date => {
    const [hours, minutes] = time
      .split(":")
      .map((num) => Number.parseInt(num, 10));

    const combinedDateTime = new Date(date);
    combinedDateTime.setHours(hours);
    combinedDateTime.setMinutes(minutes);
    combinedDateTime.setSeconds(0);

    const utcResult = new Date(
      Date.UTC(
        combinedDateTime.getFullYear(),
        combinedDateTime.getMonth(),
        combinedDateTime.getDate(),
        hours,
        minutes,
        0,
        0,
      ),
    );

    return utcResult;
  };

  const handleEventUpdateSubmit = async (accessToken: string, id: string) => {
    const ticketTypes: UpdateTicketTypeRequest[] = eventData.ticketTypes.map(
      (ticketType) => {
        return {
          id: isTempId(ticketType.id) ? undefined : ticketType.id,
          name: ticketType.name,
          price: ticketType.price,
          description: ticketType.description,
          totalAvailable: ticketType.totalAvailable,
        };
      },
    );

    const request: UpdateEventRequest = {
      id: id,
      name: eventData.name,
      start:
        eventData.startDate && eventData.startTime
          ? combineDateTime(eventData.startDate, eventData.startTime)
          : undefined,
      end:
        eventData.endDate && eventData.endTime
          ? combineDateTime(eventData.endDate, eventData.endTime)
          : undefined,
      venue: eventData.venueDetails,
      salesStart:
        eventData.salesStartDate && eventData.salesStartTime
          ? combineDateTime(eventData.salesStartDate, eventData.salesStartTime)
          : undefined,
      salesEnd:
        eventData.salesEndDate && eventData.salesEndTime
          ? combineDateTime(eventData.salesEndDate, eventData.salesEndTime)
          : undefined,
      status: eventData.status,
      ticketTypes: ticketTypes,
    };

    try {
      await updateEvent(accessToken, id, request);
      navigate("/dashboard/events");
    } catch (err) {
      if (err instanceof Error) {
        setError(err.message);
      } else if (typeof err === "string") {
        setError(err);
      } else {
        setError("An unknown error occurred");
      }
    }
  };

  const handleEventCreateSubmit = async (accessToken: string) => {
    const ticketTypes: CreateTicketTypeRequest[] = eventData.ticketTypes.map(
      (ticketType) => {
        return {
          name: ticketType.name,
          price: ticketType.price,
          description: ticketType.description,
          totalAvailable: ticketType.totalAvailable,
        };
      },
    );

    const request: CreateEventRequest = {
      name: eventData.name,
      start:
        eventData.startDate && eventData.startTime
          ? combineDateTime(eventData.startDate, eventData.startTime)
          : undefined,
      end:
        eventData.endDate && eventData.endTime
          ? combineDateTime(eventData.endDate, eventData.endTime)
          : undefined,
      venue: eventData.venueDetails,
      salesStart:
        eventData.salesStartDate && eventData.salesStartTime
          ? combineDateTime(eventData.salesStartDate, eventData.salesStartTime)
          : undefined,
      salesEnd:
        eventData.salesEndDate && eventData.salesEndTime
          ? combineDateTime(eventData.salesEndDate, eventData.salesEndTime)
          : undefined,
      status: eventData.status,
      ticketTypes: ticketTypes,
    };

    try {
      await createEvent(accessToken, request);
      navigate("/dashboard/events");
    } catch (err) {
      if (err instanceof Error) {
        setError(err.message);
      } else if (typeof err === "string") {
        setError(err);
      } else {
        setError("An unknown error occurred");
      }
    }
  };

  const handleFormSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(undefined);

    if (isLoading || !user || !user.access_token) {
      console.error("User not found!");
      return;
    }

    if (isEditMode) {
      if (!eventData.id) {
        setError("Event does not have an ID");
        return;
      }
      await handleEventUpdateSubmit(user.access_token, eventData.id);
    } else {
      await handleEventCreateSubmit(user.access_token);
    }
  };

  const handleAddTicketType = () => {
    setCurrentTicketType({
      id: undefined,
      name: "",
      price: 0,
      totalAvailable: 0,
      description: "",
    });
    setDialogOpen(true);
  };

  const handleSaveTicketType = () => {
    if (!currentTicketType) {
      return;
    }

    const newTicketTypes = [...eventData.ticketTypes];

    if (currentTicketType.id) {
      const index = newTicketTypes.findIndex(
        (t) => t.id === currentTicketType.id,
      );
      if (index !== -1) {
        newTicketTypes[index] = currentTicketType;
      }
    } else {
      newTicketTypes.push({
        ...currentTicketType,
        id: generateTempId(),
      });
    }

    updateField("ticketTypes", newTicketTypes);
    setDialogOpen(false);
  };

  const handleEditTicketType = (ticketType: TicketTypeData) => {
    setCurrentTicketType(ticketType);
    setDialogOpen(true);
  };

  const handleDeleteTicketType = (id: string | undefined) => {
    if (!id) {
      return;
    }
    updateField(
      "ticketTypes",
      eventData.ticketTypes.filter((t) => t.id !== id),
    );
  };

  return (
    <div className="min-h-screen bg-black text-white">
      <NavBar />
      <div className="container mx-auto px-4 py-8 max-w-xl">
        <div className="mb-6">
          <h1 className="text-2xl font-bold">
            {isEditMode ? "Edit Event" : "Create a New Event"}
          </h1>
          {isEditMode ? (
            <>
              {eventData.id && (
                <p className="text-sm text-gray-400">ID: {eventData.id}</p>
              )}
              {eventData.createdAt && (
                <p className="text-sm text-gray-400">
                  Created At: {format(eventData.createdAt, "PPP")}
                </p>
              )}
              {eventData.updatedAt && (
                <p className="text-sm text-gray-400">
                  Updated At: {format(eventData.updatedAt, "PPP")}
                </p>
              )}
            </>
          ) : (
            <p>Fill out the form below to create your event</p>
          )}
        </div>

        <form onSubmit={handleFormSubmit} className="space-y-4">
          {/* Event Name */}
          <div>
            <div>
              <label htmlFor="event-name" className="text-sm font-medium">
                Event Name
              </label>
              <Input
                id="event-name"
                className="bg-gray-900 border-gray-700 text-white"
                placeholder="Event Name"
                value={eventData.name}
                onChange={(e) => updateField("name", e.target.value)}
                required
              />
            </div>
            <p className="text-gray-400 text-xs">
              This is the public name of your event.
            </p>
          </div>

          {/* Event Start Date Time */}
          <div>
            <label className="text-sm font-medium">Event Start</label>
            <DateTimeSelect
              date={eventData.startDate}
              setDate={(date) => updateField("startDate", date)}
              time={eventData.startTime}
              setTime={(time) => updateField("startTime", time)}
              enabled={eventDateEnabled}
              setEnabled={setEventDateEnabled}
            />
            <p className="text-gray-400 text-xs">
              The date and time that the event starts.
            </p>
          </div>

          {/* Event End Date Time */}
          <div>
            <label className="text-sm font-medium">Event End</label>
            <DateTimeSelect
              date={eventData.endDate}
              setDate={(date) => updateField("endDate", date)}
              time={eventData.endTime}
              setTime={(time) => updateField("endTime", time)}
              enabled={eventDateEnabled}
              setEnabled={setEventDateEnabled}
            />
            <p className="text-gray-400 text-xs">
              The date and time that the event ends.
            </p>
          </div>

          <div>
            <label htmlFor="venue-details" className="text-sm font-medium">
              Venue Details
            </label>
            <Textarea
              id="venue-details"
              className="bg-gray-900 border-gray-700 min-h-[100px]"
              value={eventData.venueDetails}
              onChange={(e) => updateField("venueDetails", e.target.value)}
            />
            <p className="text-gray-400 text-xs">
              Details about the venue, please include as much detail as
              possible.
            </p>
          </div>

          {/* Event Sales Start Date Time */}
          <div>
            <label className="text-sm font-medium">Event Sales Start</label>
            <DateTimeSelect
              date={eventData.salesStartDate}
              setDate={(date) => updateField("salesStartDate", date)}
              time={eventData.salesStartTime}
              setTime={(time) => updateField("salesStartTime", time)}
              enabled={eventSalesDateEnabled}
              setEnabled={setEventSalesDateEnabled}
            />
            <p className="text-gray-400 text-xs">
              The date and time that ticket are available to purchase for the
              event.
            </p>
          </div>

          {/* Event Sales End Date Time */}
          <div>
            <label className="text-sm font-medium">Event Sales End</label>
            <DateTimeSelect
              date={eventData.salesEndDate}
              setDate={(date) => updateField("salesEndDate", date)}
              time={eventData.salesEndTime}
              setTime={(time) => updateField("salesEndTime", time)}
              enabled={eventSalesDateEnabled}
              setEnabled={setEventSalesDateEnabled}
            />
            <p className="text-gray-400 text-xs">
              The date and time that ticket are available to purchase for the
              event.
            </p>
          </div>

          {/* Ticket Types */}
          <div>
            <Card className="bg-gray-900 border-gray-700 text-white">
              <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
                <CardHeader>
                  <div className="flex justify-between">
                    <CardTitle className="flex gap-2 items-center text-sm">
                      <Ticket />
                      Ticket Types
                    </CardTitle>
                    <Button
                      type="button"
                      onClick={() => handleAddTicketType()}
                      className="bg-gray-800 border-gray-700 text-white"
                    >
                      <Plus /> Add Ticket Type
                    </Button>
                  </div>
                </CardHeader>

                <CardContent className="space-y-2">
                  {eventData.ticketTypes.map((ticketType) => {
                    return (
                      <div className="bg-gray-700 w-full p-4 rounded-lg border-gray-600">
                        <div className="flex justify-between items-center">
                          {/* Left */}
                          <div>
                            <div className="flex gap-4">
                              <p className="text-small font-medium">
                                {ticketType.name}
                              </p>
                              <Badge
                                variant="outline"
                                className="border-gray-600 text-white font-normal text-xs"
                              >
                                ${ticketType.price}
                              </Badge>
                            </div>
                            {ticketType.totalAvailable && (
                              <p className="text-gray-400">
                                {ticketType.totalAvailable} tickets available
                              </p>
                            )}
                          </div>
                          {/* Right */}
                          <div className="flex gap-2">
                            <Button
                              type="button"
                              variant="ghost"
                              onClick={() => handleEditTicketType(ticketType)}
                            >
                              <Edit />
                            </Button>
                            <Button
                              type="button"
                              variant="ghost"
                              className="text-red-400"
                              onClick={() =>
                                handleDeleteTicketType(ticketType.id)
                              }
                            >
                              <Trash />
                            </Button>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </CardContent>
                <DialogContent className="bg-gray-900 border-gray-700 text-white">
                  <DialogHeader>
                    <DialogTitle>Add Ticket Type</DialogTitle>
                    <DialogDescription className="text-gray-400">
                      Please enter details of the ticket type
                    </DialogDescription>
                  </DialogHeader>

                  {/* Ticket Type Name */}
                  <div className="space-y-1">
                    <Label htmlFor="ticket-type-name">Name</Label>
                    <Input
                      id="ticket-type-name"
                      className="bg-gray-800 border-gray-700"
                      value={currentTicketType?.name}
                      onChange={(e) =>
                        setCurrentTicketType(
                          currentTicketType
                            ? { ...currentTicketType, name: e.target.value }
                            : undefined,
                        )
                      }
                      placeholder="e.g General Admission, VIP, etc."
                    />
                  </div>

                  <div className="flex gap-4">
                    {/* Price */}
                    <div className="space-y-1 w-full">
                      <Label htmlFor="ticket-type-price">Price</Label>
                      <Input
                        id="ticket-type-price"
                        type="number"
                        value={currentTicketType?.price}
                        onChange={(e) =>
                          setCurrentTicketType(
                            currentTicketType
                              ? {
                                  ...currentTicketType,
                                  price: Number.parseFloat(e.target.value),
                                }
                              : undefined,
                          )
                        }
                        className="bg-gray-800 border-gray-700"
                      />
                    </div>

                    {/* Total Available */}
                    <div className="space-y-1 w-full">
                      <Label htmlFor="ticket-type-total-available">
                        Total Available
                      </Label>
                      <Input
                        id="ticket-type-total-available"
                        type="number"
                        value={currentTicketType?.totalAvailable}
                        onChange={(e) =>
                          setCurrentTicketType(
                            currentTicketType
                              ? {
                                  ...currentTicketType,
                                  totalAvailable: Number.parseFloat(
                                    e.target.value,
                                  ),
                                }
                              : undefined,
                          )
                        }
                        className="bg-gray-800 border-gray-700"
                      />
                    </div>
                  </div>

                  {/* Ticket Type Description */}
                  <div className="space-y-1">
                    <Label htmlFor="ticket-type-description">Description</Label>
                    <Textarea
                      id="ticket-type-description"
                      className="bg-gray-800 border-gray-700"
                      value={currentTicketType?.description}
                      onChange={(e) =>
                        setCurrentTicketType(
                          currentTicketType
                            ? {
                                ...currentTicketType,
                                description: e.target.value,
                              }
                            : undefined,
                        )
                      }
                    />
                  </div>
                  <DialogFooter>
                    <Button
                      className="bg-white text-black hover:bg-gray-300"
                      onClick={handleSaveTicketType}
                    >
                      Save
                    </Button>
                  </DialogFooter>
                </DialogContent>
              </Dialog>
            </Card>
          </div>

          {/* Status */}
          <div className="space-y-1">
            <Label>Status</Label>
            <Select
              value={eventData.status}
              onValueChange={(value) => updateField("status", value)}
            >
              <SelectTrigger className="w-[180px] bg-gray-900 border-gray-700 text-white">
                <SelectValue placeholder="Select Event Status" />
              </SelectTrigger>
              <SelectContent className="bg-gray-900 border-gray-700 text-white">
                <SelectItem value={EventStatusEnum.DRAFT}>Draft</SelectItem>
                <SelectItem value={EventStatusEnum.PUBLISHED}>
                  Published
                </SelectItem>
              </SelectContent>
            </Select>
            <p className="text-gray-400 text-xs">
              Please select the status of the new event.
            </p>
          </div>

          {error && (
            <Alert variant="destructive" className="bg-gray-900 border-red-700">
              <AlertCircle className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          <div>
            <Button onClick={handleFormSubmit}>
              {isEditMode ? "Update" : "Submit"}
            </Button>
          </div>
        </form>
        {/* For Development Only */}
        {/* <p className="mt-8 font-mono text-white">{JSON.stringify(eventData)}</p> */}
      </div>
    </div>
  );
};

export default DashboardManageEventPage;

========== END OF FILE: ./tickets-fe/src/pages/dashboard-manage-event-page.tsx ==========

========== FILE: ./tickets-fe/src/pages/organizers-landing-page.tsx ==========
import { Button } from "@/components/ui/button";
import { useAuth } from "react-oidc-context";
import { useNavigate } from "react-router";

const OrganizersLandingPage: React.FC = () => {
  const { isAuthenticated, isLoading, signinRedirect, signoutRedirect } =
    useAuth();

  const navigate = useNavigate();

  if (isLoading) {
    return <p>Loading...</p>;
  }

  return (
    <div className="bg-black min-h-screen text-white">
      {/* Nav */}
      <div className="flex justify-end p-4 container mx-auto">
        {isAuthenticated ? (
          <div className="flex gap-4">
            <Button
              onClick={() => navigate("/dashboard/events")}
              className="cursor-pointer"
            >
              Dashboard
            </Button>
            <Button
              className="cursor-pointer"
              onClick={() => signoutRedirect()}
            >
              Log out
            </Button>
          </div>
        ) : (
          <div className="flex gap-4">
            <Button
              className="cursor-pointer"
              onClick={() => {
                localStorage.setItem(
                  "redirectPath",
                  window.location.pathname + window.location.search + window.location.hash
                );
                signinRedirect();
              }}
            >
              Log in
            </Button>
          </div>
        )}
      </div>

      <main className="container mx-auto px-4 py-16">
        <div className="grid grid-cols-2 gap-8 max-w-5xl mx-auto">
          {/* Left Column */}
          <div className="space-y-4">
            <h1 className="text-5xl font-bold">
              Create, Manage, and Sell Events Tickets with Ease
            </h1>
            <p className="text-xl">
              A complete platform for event organizers to create events, sell
              tickets, and validate attendees with QR Codes.
            </p>
            <div className="flex flex-wrap gap-4">
              <Button
                className="cursor-pointer"
                onClick={() => navigate("/dashboard/events/create")} // changed this
              >
                Create an Event
              </Button>
              <Button>Browse Events</Button>
            </div>
          </div>
          {/* Right Column */}
          <div className="bg-gray-600 rounded-lg aspect-square w-full max-w-sm overflow-hidden">
            <img
              src="organizers-landing-hero.png"
              alt="A busy concert"
              className="w-full h-full object-cover"
            />
          </div>
        </div>
      </main>
    </div>
  );
};

export default OrganizersLandingPage;

========== END OF FILE: ./tickets-fe/src/pages/organizers-landing-page.tsx ==========

========== FILE: ./tickets-fe/src/pages/attendee-landing-page.tsx ==========
import { useAuth } from "react-oidc-context";
import { Button } from "../components/ui/button";
import { useNavigate } from "react-router";
import { Input } from "@/components/ui/input";
import { AlertCircle, Search } from "lucide-react";
import { useEffect, useState } from "react";
import { PublishedEventSummary, SpringBootPagination } from "@/domain/domain";
import { listPublishedEvents, searchPublishedEvents } from "@/lib/api";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import PublishedEventCard from "@/components/published-event-card";
import { SimplePagination } from "@/components/simple-pagination";

const AttendeeLandingPage: React.FC = () => {
  const { isAuthenticated, isLoading, signinRedirect, signoutRedirect } =
    useAuth();

  const navigate = useNavigate();

  const [page, setPage] = useState(0);
  const [publishedEvents, setPublishedEvents] = useState<
    SpringBootPagination<PublishedEventSummary> | undefined
  >();
  const [error, setError] = useState<string | undefined>();
  const [query, setQuery] = useState<string | undefined>();

  useEffect(() => {
    if (query && query.length > 0) {
      queryPublishedEvents();
    } else {
      refreshPublishedEvents();
    }
  }, [page]);

  const refreshPublishedEvents = async () => {
    try {
      setPublishedEvents(await listPublishedEvents(page));
    } catch (err) {
      if (err instanceof Error) {
        setError(err.message);
      } else if (typeof err === "string") {
        setError(err);
      } else {
        setError("An unknown error has occurred");
      }
    }
  };

  const queryPublishedEvents = async () => {
    if (!query) {
      await refreshPublishedEvents();
    }

    try {
      setPublishedEvents(await searchPublishedEvents(query, page));
    } catch (err) {
      if (err instanceof Error) {
        setError(err.message);
      } else if (typeof err === "string") {
        setError(err);
      } else {
        setError("An unknown error has occurred");
      }
    }
  };

  if (error) {
    return (
      <div className="min-h-screen bg-black text-white">
        <Alert variant="destructive" className="bg-gray-900 border-red-700">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      </div>
    );
  }

  if (isLoading) {
    return <p>Loading...</p>;
  }

  return (
    <div className="bg-black min-h-screen text-white">
      {/* Nav */}
      <div className="flex justify-end p-4 container mx-auto">
        {isAuthenticated ? (
          <div className="flex gap-4">
            <Button
              onClick={() => navigate("/dashboard")}
              className="cursor-pointer"
            >
              Dashboard
            </Button>
            <Button
              className="cursor-pointer"
              onClick={() => signoutRedirect()}
            >
              Log out
            </Button>
          </div>
        ) : (
          <div className="flex gap-4">
            <Button className="cursor-pointer" onClick={() => signinRedirect()}>
              Log in
            </Button>
          </div>
        )}
      </div>
      {/* Hero */}
      <div className="container mx-auto px-4 mb-8">
        <div className="bg-[url(/organizers-landing-hero.png)] bg-cover min-h-[200px] rounded-lg bg-bottom md:min-h-[250px]">
          <div className="bg-black/45 min-h-[200px] md:min-h-[250px] p-15 md:p-20">
            <h1 className="text-2xl font-bold mb-4">
              Find Tickets to Your Next Event
            </h1>
            <div className="flex gap-2 max-w-lg">
              <Input
                className="bg-white text-black"
                value={query}
                onChange={(e) => setQuery(e.target.value)}
              />
              <Button onClick={queryPublishedEvents}>
                <Search />
              </Button>
            </div>
          </div>
        </div>
      </div>

      {/* Published Event Cards */}
      <div className="grid grid-cols-2 gap-4 px-4 md:grid-cols-4">
        {publishedEvents?.content?.map((publishedEvent) => (
          <PublishedEventCard
            publishedEvent={publishedEvent}
            key={publishedEvent.id}
          />
        ))}
      </div>

      {publishedEvents && (
        <div className="w-full flex justify-center py-8">
          <SimplePagination
            pagination={publishedEvents}
            onPageChange={setPage}
          />{" "}
        </div>
      )}
    </div>
  );
};

export default AttendeeLandingPage;

========== END OF FILE: ./tickets-fe/src/pages/attendee-landing-page.tsx ==========

========== FILE: ./tickets-fe/src/pages/dashboard-list-tickets.tsx ==========
import NavBar from "@/components/nav-bar";
import { SimplePagination } from "@/components/simple-pagination";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { SpringBootPagination, TicketSummary } from "@/domain/domain";
import { listTickets } from "@/lib/api";
import { AlertCircle, DollarSign, Tag, Ticket } from "lucide-react";
import { useEffect, useState } from "react";
import { useAuth } from "react-oidc-context";
import { Link } from "react-router";

const DashboardListTickets: React.FC = () => {
  const { isLoading, user } = useAuth();

  const [tickets, setTickets] = useState<
    SpringBootPagination<TicketSummary> | undefined
  >();
  const [error, setError] = useState<string | undefined>();
  const [page, setPage] = useState(0);

  useEffect(() => {
    if (isLoading || !user?.access_token) {
      return;
    }

    const doUseEffect = async () => {
      try {
        setTickets(await listTickets(user.access_token, page));
      } catch (err) {
        if (err instanceof Error) {
          setError(err.message);
        } else if (typeof err === "string") {
          setError(err);
        } else {
          setError("An unknown error occurred");
        }
      }
    };

    doUseEffect();
  }, [isLoading, user?.access_token, page]);

  if (error) {
    return (
      <div className="bg-black min-h-screen text-white">
        <NavBar />
        <Alert variant="destructive" className="bg-gray-900 border-red-700">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      </div>
    );
  }

  return (
    <div className="bg-black min-h-screen text-white">
      <NavBar />

      {/* Title */}
      <div className="py-8 px-4">
        <h1 className="text-2xl font-bold">Your Tickets</h1>
        <p>Tickets you have purchased</p>
      </div>

      <div className="max-w-lg mx-auto">
        {tickets?.content.map((ticketItem) => (
          <Link to={`/dashboard/tickets/${ticketItem.id}`}>
            <Card key={ticketItem.id} className="bg-gray-900 text-white">
              <CardHeader>
                <div className="flex justify-between">
                  <div className="flex items-center gap-2">
                    <Ticket className="h-5 w-5 text-gray-400" />
                    <h3 className="font-bold text-xl">
                      {ticketItem.ticketType.name}
                    </h3>
                  </div>
                  <span>{ticketItem.status}</span>
                </div>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* Price */}
                <div className="flex items-center gap-2">
                  <DollarSign className="h-5 w-5 text-gray-400" />
                  <p className="font-medium">${ticketItem.ticketType.price}</p>
                </div>

                {/* Ticket ID */}
                <div className="flex items-center gap-2">
                  <Tag className="h-5 w-5 text-gray-400" />
                  <div>
                    <h4 className="font-medium">Ticket ID</h4>
                    <p className="text-gray-400 font-mono text-sm">
                      {ticketItem.id}
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </Link>
        ))}
      </div>
      <div className="flex justify-center py-8">
        {tickets && (
          <SimplePagination pagination={tickets} onPageChange={setPage} />
        )}
      </div>
    </div>
  );
};

export default DashboardListTickets;

========== END OF FILE: ./tickets-fe/src/pages/dashboard-list-tickets.tsx ==========

========== FILE: ./tickets-fe/src/pages/dashboard-view-ticket-page.tsx ==========
import { TicketDetails, TicketStatus } from "@/domain/domain";
import { getTicket, getTicketQr } from "@/lib/api";
import { format } from "date-fns";
import { Calendar, DollarSign, MapPin, Tag } from "lucide-react";
import { useEffect, useState } from "react";
import { useAuth } from "react-oidc-context";
import { useParams } from "react-router";

const DashboardViewTicketPage: React.FC = () => {
  const [ticket, setTicket] = useState<TicketDetails | undefined>();
  const [qrCodeUrl, setQrCodeUrl] = useState<string | undefined>();
  const [isQrLoading, setIsQrCodeLoading] = useState(true);
  const [error, setError] = useState<string | undefined>();

  const { id } = useParams();
  const { isLoading, user } = useAuth();

  useEffect(() => {
    if (isLoading || !user?.access_token || !id) {
      return;
    }

    const doUseEffect = async (accessToken: string, id: string) => {
      try {
        setIsQrCodeLoading(true);
        setError(undefined);

        setTicket(await getTicket(accessToken, id));
        setQrCodeUrl(URL.createObjectURL(await getTicketQr(accessToken, id)));
      } catch (err) {
        if (err instanceof Error) {
          setError(err.message);
        } else if (typeof err === "string") {
          setError(err);
        } else {
          setError("An unknown error has occurred");
        }
      } finally {
        setIsQrCodeLoading(false);
      }
    };

    doUseEffect(user?.access_token, id);

    return () => {
      if (qrCodeUrl) {
        URL.revokeObjectURL(qrCodeUrl);
      }
    };
  }, [user?.access_token, isLoading, id]);

  const getStatusColor = (status: TicketStatus) => {
    switch (status) {
      case TicketStatus.PURCHASED:
        return "text-green-400";
      case TicketStatus.CANCELLED:
        return "text-red-400";
      default:
        return "text-gray-400";
    }
  };

  if (!ticket) {
    return <p>Loading..</p>;
  }

  return (
    <div className="bg-black min-h-screen text-white flex items-center justify-center p-4">
      <div className="w-full max-w-md">
        <div className="relative bg-gradient-to-br from-purple-900 via-purple-800 to-indigo-900 rounded-3xl p-8 shadow-2xl">
          {/* Status */}
          <div className="bg-black/30 backdrop-blur-sm px-3 py-1 rounded-full mb-8 text-center">
            <span
              className={`text-sm font-medium ${getStatusColor(ticket.status)}`}
            >
              {ticket?.status}
            </span>
          </div>

          <div className="mb-2">
            <h1 className="text-2xl font-bold mb-2">{ticket.eventName}</h1>
            <div className="flex items-center gap-2 text-purple-200">
              <MapPin className="w-4" />
              <span>{ticket.eventVenue}</span>
            </div>
          </div>

          <div className="flex items-center gap-2 text-purple-300 mb-8">
            <Calendar className="w-4 text-purple-200" />
            <div>
              {format(ticket.eventStart, "Pp")} -{" "}
              {format(ticket.eventEnd, "Pp")}
            </div>
          </div>

          <div className="flex justify-center mb-8">
            <div className="bg-white p-4 rounded-2xl shadow-lg">
              <div className="w-32 h-32 flex items-center justify-center">
                {/* Loading */}
                {isQrLoading && (
                  <div className="text-xs text-center p2">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 mb-2 mx-auto"></div>
                    <div className="text-gray-800">Loading QR...</div>
                  </div>
                )}
                {/* error */}
                {error && (
                  <div className="text-red-400 text-sm text-center p-2">
                    <div className="mb-1">⚠️</div>
                    {error}
                  </div>
                )}
                {/* Display QR */}
                {qrCodeUrl && !isQrLoading && !error && (
                  <img
                    src={qrCodeUrl}
                    alt="QR Code for event"
                    className="w-full h-full object-contain rounded-large"
                  />
                )}
              </div>
            </div>
          </div>

          <div className="text-center mb-8">
            <p className="text-purple-200 text-sm">
              Present this QR code at the venue for entry
            </p>
          </div>

          <div className="space-y-2 mb-8">
            <div className="flex items-center gap-2">
              <Tag className="w-5 text-purple-200" />
              <span className="font-semibold">{ticket.description}</span>
            </div>
            <div className="flex items-center gap-2">
              <DollarSign className="w-5 text-purple-200" />
              <span className="font-semibold">{ticket.price}</span>
            </div>
          </div>

          <div className="text-center mb-2">
            <h4 className="text-sm font-semibold font-mono">Ticket ID</h4>
            <p className="text-purple-200 text-sm font-mono">{ticket.id}</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DashboardViewTicketPage;

========== END OF FILE: ./tickets-fe/src/pages/dashboard-view-ticket-page.tsx ==========

========== FILE: ./tickets-fe/src/pages/purchase-ticket-page.tsx ==========
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { purchaseTicket } from "@/lib/api";
import { CheckCircle, CreditCard } from "lucide-react";
import { useEffect, useState } from "react";
import { useAuth } from "react-oidc-context";
import { useNavigate, useParams } from "react-router";

const PurchaseTicketPage: React.FC = () => {
  const { eventId, ticketTypeId } = useParams();
  const { isLoading, user } = useAuth();
  const navigate = useNavigate();
  const [error, setError] = useState<string | undefined>();
  const [isPurchaseSuccess, setIsPurchaseASuccess] = useState(false);

  useEffect(() => {
    if (!isPurchaseSuccess) {
      return;
    }
    const timer = setTimeout(() => {
      navigate("/");
    }, 3000);

    return () => clearTimeout(timer);
  }, [isPurchaseSuccess]);

  const handlePurchase = async () => {
    if (isLoading || !user?.access_token || !eventId || !ticketTypeId) {
      return;
    }
    try {
      await purchaseTicket(user.access_token, eventId, ticketTypeId);
      setIsPurchaseASuccess(true);
    } catch (err) {
      if (err instanceof Error) {
        setError(err.message);
      } else if (typeof err === "string") {
        setError(err);
      } else {
        setError("An unknown error occurred");
      }
    }
  };

  if (isPurchaseSuccess) {
    return (
      <div className="bg-black min-h-screen text-white flex items-center">
        <div className="max-w-md mx-auto p-8 text-center">
          <div className="bg-white p-8 rounded-lg border border-gray-200 shadow-sm text-black">
            <div className="space-y-2">
              <CheckCircle className="h-16 w-16 text-green-500 mx-auto" />
              <h2 className="text-2xl font-bold text-green-600">Thank you!</h2>
              <p className="text-gray-600">
                Your ticket purchase was successful.
              </p>
              <p className="text-gray-600 text-sm">
                Redirecting to home page in a few seconds...
              </p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-black min-h-screen text-white">
      <div className="max-w-md mx-auto py-20">
        <div className="bg-white border-gray-300 shadow-sm border rounded-lg space-y-4 p-6">
          {error && (
            <div className="border border-red-200 rounded-lg p-4 bg-red-50">
              <div className="text-red-500 text-sm">
                <strong>Error:</strong> {error}
              </div>
            </div>
          )}

          {/* Credit Card Number */}
          <div className="space-y-2">
            <Label className="text-gray-600">Credit Card Number</Label>
            <div className="relative">
              <Input
                type="text"
                placeholder="1234 5678 9012 3456"
                maxLength={19}
                className="bg-gray-200 text-black pl-10"
              />
              <CreditCard className="absolute h-4 w-4 text-gray-400 top-2.5 left-3" />
            </div>
          </div>

          <div className="space-y-2">
            <Label className="text-gray-600">Cardholder Name </Label>
            <div className="relative">
              <Input
                type="text"
                placeholder="John Smith"
                className="bg-gray-200 text-black pl-10"
              />
              <CreditCard className="absolute h-4 w-4 text-gray-400 top-2.5 left-3" />
            </div>
          </div>

          <div className="flex justify-center">
            <Button
              className="bg-purple-500 hover:bg-purple-800 cursor-pointer"
              onClick={handlePurchase}
            >
              Purchase Ticket
            </Button>
          </div>

          <div className="text-gray-500 text-xs flex items-center justify-center">
            This is a mock page, no payment details should be entered.
          </div>
        </div>
      </div>
    </div>
  );
};

export default PurchaseTicketPage;

========== END OF FILE: ./tickets-fe/src/pages/purchase-ticket-page.tsx ==========

========== FILE: ./tickets-fe/src/pages/callback-page.tsx ==========
import { useEffect } from "react";
import { useAuth } from "react-oidc-context";
import { useNavigate } from "react-router";

const CallbackPage: React.FC = () => {
  const { isLoading, isAuthenticated, error } = useAuth();
  const navigate = useNavigate();

  useEffect(() => {
    if (error) {
      console.error("OIDC error:", error);
    }

    if (isLoading) {
      return;
    }

    if (isAuthenticated) {
      const redirectPath = localStorage.getItem("redirectPath");
      localStorage.removeItem("redirectPath");
      navigate(redirectPath || "/"); // fallback to home if missing
    }
  }, [isLoading, isAuthenticated, navigate, error]);

  if (error) {
    return <p>Authentication error: {error.message}</p>;
  }

  if (isLoading) {
    return <p>Processing login...</p>;
  }

  return <p>Completing login...</p>;
};

export default CallbackPage;
========== END OF FILE: ./tickets-fe/src/pages/callback-page.tsx ==========

========== FILE: ./tickets-fe/src/pages/login-page.tsx ==========
import { useEffect } from "react";
import { useAuth } from "react-oidc-context";

const LoginPage: React.FC = () => {
  const { isLoading, isAuthenticated, signinRedirect } = useAuth();

  useEffect(() => {
    if (isLoading) {
      return;
    }
    if (!isAuthenticated) {
      signinRedirect();
    }
  }, [isLoading, isAuthenticated, signinRedirect]);

  return <div>Redirecting to login...</div>;
};

export default LoginPage;

========== END OF FILE: ./tickets-fe/src/pages/login-page.tsx ==========

========== FILE: ./tickets-fe/src/pages/published-events-page.tsx ==========
import RandomEventImage from "@/components/random-event-image";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import {
  PublishedEventDetails,
  PublishedEventTicketTypeDetails,
} from "@/domain/domain";
import { getPublishedEvent } from "@/lib/api";
import { AlertCircle, MapPin } from "lucide-react";
import { useEffect, useState } from "react";
import { useAuth } from "react-oidc-context";
import { Link, useNavigate, useParams } from "react-router";

const PublishedEventsPage: React.FC = () => {
  const { isAuthenticated, isLoading, signinRedirect, signoutRedirect } =
    useAuth();
  const navigate = useNavigate();
  const { id } = useParams();
  const [error, setError] = useState<string | undefined>();
  const [publishedEvent, setPublishedEvent] = useState<
    PublishedEventDetails | undefined
  >();
  const [selectedTicketType, setSelectedTicketType] = useState<
    PublishedEventTicketTypeDetails | undefined
  >();

  useEffect(() => {
    if (!id) {
      setError("ID must be provided!");
      return;
    }

    const doUseEffect = async () => {
      try {
        const eventData = await getPublishedEvent(id);
        setPublishedEvent(eventData);
        if (eventData.ticketTypes.length > 0) {
          setSelectedTicketType(eventData.ticketTypes[0]);
        }
      } catch (err) {
        if (err instanceof Error) {
          setError(err.message);
        } else if (typeof err === "string") {
          setError(err);
        } else {
          setError("An unknown error has occurred");
        }
      }
    };
    doUseEffect();
  }, [id]);

  if (error) {
    return (
      <div className="min-h-screen bg-black text-white">
        <Alert variant="destructive" className="bg-gray-900 border-red-700">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      </div>
    );
  }

  if (isLoading) {
    return <p>Loading...</p>;
  }

  return (
    <div className="bg-black min-h-screen text-white">
      {/* Nav */}
      <div className="flex justify-end p-4 container mx-auto">
        {isAuthenticated ? (
          <div className="flex gap-4">
            <Button
              onClick={() => navigate("/dashboard/events")}
              className="cursor-pointer"
            >
              Dashboard
            </Button>
            <Button
              className="cursor-pointer"
              onClick={() => signoutRedirect()}
            >
              Log out
            </Button>
          </div>
        ) : (
          <div className="flex gap-4">
            <Button className="cursor-pointer" onClick={() => signinRedirect()}>
              Log in
            </Button>
          </div>
        )}
      </div>

      <main className="container mx-auto px-4 py-16">
        {/* Header */}
        <div className="grid grid-cols-2 gap-8 max-w-5xl mx-auto mb-8">
          {/* Left Column */}
          <div className="space-y-4">
            <h1 className="text-3xl font-bold">{publishedEvent?.name}</h1>
            <p className="text-lg flex gap-2 text-gray-300">
              <MapPin />
              {publishedEvent?.venue}
            </p>
          </div>
          {/* Right Column */}
          <div className="bg-gray-600 rounded-lg w-full max-w-sm overflow-hidden">
            <RandomEventImage />
          </div>
        </div>

        <h2 className="text-2xl font-bold mb-6">Available Tickets</h2>
        <div className="flex gap-2">
          {/* Left */}
          <div className="w-1/2">
            {publishedEvent?.ticketTypes?.map((ticketType) => (
              <Card
                className="bg-gray-800 border-gray-600 hover:bg-gray-700 text-white cursor-pointer gap-0 mb-2"
                key={ticketType.id}
                onClick={() => setSelectedTicketType(ticketType)}
              >
                <CardHeader>
                  <div className="flex justify-between items-center">
                    <h3 className="text-lg font-semibold">{ticketType.name}</h3>
                    <span className="text-xl font-bold ">
                      ${ticketType.price}
                    </span>
                  </div>
                </CardHeader>
                <CardContent>
                  <p className="text-gray-300 text-sm">
                    {ticketType.description}
                  </p>
                </CardContent>
              </Card>
            ))}
          </div>

          {/* Right */}
          <div className="w-1/2 text-white">
            <div className="bg-gray-800 rounded-lg p-6 border border-gray-600">
              <h2 className="text-2xl font-bold">{selectedTicketType?.name}</h2>
              <div className="mb-6">
                <span className="text-3xl font-bold">
                  ${selectedTicketType?.price}
                </span>
              </div>
              <div className="mb-6">
                <p className="text-gray-300">
                  {selectedTicketType?.description}
                </p>
              </div>
              <Link
                to={`/events/${publishedEvent?.id}/purchase/${selectedTicketType?.id}`}
              >
                <Button className="w-full bg-purple-600 hover:bg-purple-700 cursor-pointer">
                  Purchase Ticket
                </Button>
              </Link>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
};

export default PublishedEventsPage;

========== END OF FILE: ./tickets-fe/src/pages/published-events-page.tsx ==========

========== FILE: ./tickets-fe/src/domain/domain.ts ==========
export interface ErrorResponse {
  error: string;
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const isErrorResponse = (obj: any): obj is ErrorResponse => {
  return (
    obj &&
    typeof obj === "object" &&
    "error" in obj &&
    typeof obj.error === "string"
  );
};

export enum EventStatusEnum {
  DRAFT = "DRAFT",
  PUBLISHED = "PUBLISHED",
  CANCELLED = "CANCELLED",
  COMPLETED = "COMPLETED",
}

export interface CreateTicketTypeRequest {
  name: string;
  price: number;
  description: string;
  totalAvailable?: number;
}

export interface CreateEventRequest {
  name: string;
  start?: Date;
  end?: Date;
  venue: string;
  salesStart?: Date;
  salesEnd?: Date;
  status: EventStatusEnum;
  ticketTypes: CreateTicketTypeRequest[];
}

export interface UpdateTicketTypeRequest {
  id: string | undefined;
  name: string;
  price: number;
  description: string;
  totalAvailable?: number;
}

export interface UpdateEventRequest {
  id: string;
  name: string;
  start?: Date;
  end?: Date;
  venue: string;
  salesStart?: Date;
  salesEnd?: Date;
  status: EventStatusEnum;
  ticketTypes: UpdateTicketTypeRequest[];
}

export interface TicketTypeSummary {
  id: string;
  name: string;
  price: number;
  description: string;
  totalAvailable?: number;
}

export interface EventSummary {
  id: string;
  name: string;
  start?: Date;
  end?: Date;
  venue: string;
  salesStart?: Date;
  salesEnd?: Date;
  status: EventStatusEnum;
  ticketTypes: TicketTypeSummary[];
}

export interface PublishedEventSummary {
  id: string;
  name: string;
  start?: Date;
  end?: Date;
  venue: string;
}

export interface TicketTypeDetails {
  id: string;
  name: string;
  price: number;
  description: string;
  totalAvailable?: number;
}

export interface EventDetails {
  id: string;
  name: string;
  start?: Date;
  end?: Date;
  venue: string;
  salesStart?: Date;
  salesEnd?: Date;
  status: EventStatusEnum;
  ticketTypes: TicketTypeDetails[];
  createdAt: Date;
  updatedAt: Date;
}

export interface SpringBootPagination<T> {
  content: T[]; // The actual data items for the current page
  pageable: {
    sort: {
      empty: boolean;
      sorted: boolean;
      unsorted: boolean;
    };
    offset: number;
    pageNumber: number;
    pageSize: number;
    paged: boolean;
    unpaged: boolean;
  };
  last: boolean; // Whether this is the last page
  totalElements: number; // Total number of items across all pages
  totalPages: number; // Total number of pages
  size: number; // Page size (items per page)
  number: number; // Current page number (zero-based)
  sort: {
    empty: boolean;
    sorted: boolean;
    unsorted: boolean;
  };
  first: boolean; // Whether this is the first page
  numberOfElements: number; // Number of items in the current page
  empty: boolean; // Whether the current page has no items
}

export interface PublishedEventTicketTypeDetails {
  id: string;
  name: string;
  price: number;
  description: string;
}

export interface PublishedEventDetails {
  id: string;
  name: string;
  start?: Date;
  end?: Date;
  venue: string;
  ticketTypes: PublishedEventTicketTypeDetails[];
}

export enum TicketStatus {
  PURCHASED = "PURCHASED",
  CANCELLED = "CANCELLED",
}

export interface TicketSummaryTicketType {
  id: string;
  name: string;
  price: number;
}

export interface TicketSummary {
  id: string;
  status: TicketStatus;
  ticketType: TicketSummaryTicketType;
}

export interface TicketDetails {
  id: string;
  status: TicketStatus;
  price: number;
  description: string;
  eventName: string;
  eventVenue: string;
  eventStart: Date;
  eventEnd: Date;
}

export enum TicketValidationMethod {
  QR_SCAN = "QR_SCAN",
  MANUAL = "MANUAL",
}

export enum TicketValidationStatus {
  VALID = "VALID",
  INVALID = "INVALID",
  EXPIRED = "EXPIRED",
}

export interface TicketValidationRequest {
  id: string;
  method: TicketValidationMethod;
}

export interface TicketValidationResponse {
  ticketId: string;
  status: TicketValidationStatus;
}

========== END OF FILE: ./tickets-fe/src/domain/domain.ts ==========

========== FILE: ./tickets/pom.xml ==========
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.0</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.prp</groupId>
	<artifactId>tickets</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>tickets</name>
	<description>Event Ticket Platform</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>21</java.version>
		<org.mapstruct.version>1.6.3</org.mapstruct.version>
		<lombok.version>1.18.36</lombok.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${lombok.version}</version>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>com.google.zxing</groupId>
			<artifactId>core</artifactId>
			<version>3.5.1</version>
		</dependency>
		<dependency>
			<groupId>com.google.zxing</groupId>
			<artifactId>javase</artifactId>
			<version>3.5.1</version>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>${org.mapstruct.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<!-- Lombok must come first -->
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${lombok.version}</version>
						</path>
						<!-- Mapstruct processor -->
						<path>
							<groupId>org.mapstruct</groupId>
							<artifactId>mapstruct-processor</artifactId>
							<version>${org.mapstruct.version}</version>
						</path>
						<!-- Lombok-Mapstruct binding -->
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok-mapstruct-binding</artifactId>
							<version>0.2.0</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>

========== END OF FILE: ./tickets/pom.xml ==========

========== FILE: ./tickets/src/test/java/com/prp/tickets/TicketsApplicationTests.java ==========
package com.prp.tickets;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class TicketsApplicationTests {

	@Test
	void contextLoads() {
	}

}

========== END OF FILE: ./tickets/src/test/java/com/prp/tickets/TicketsApplicationTests.java ==========

========== FILE: ./tickets/src/main/resources/META-INF/orm.xml ==========
<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings xmlns="http://java.sun.com/xml/ns/persistence/orm"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_2_0.xsd"
                 version="2.0">
    <persistence-unit-metadata>
        <persistence-unit-defaults>
            <entity-listeners>
                <entity-listener
                        class="org.springframework.data.jpa.domain.support.AuditingEntityListener"/>
            </entity-listeners>
        </persistence-unit-defaults>
    </persistence-unit-metadata>
</entity-mappings>

========== END OF FILE: ./tickets/src/main/resources/META-INF/orm.xml ==========

========== FILE: ./tickets/src/main/resources/application.properties ==========
spring.application.name=tickets

# Database Connection
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=changemeinprod!

# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:9090/realms/event-ticket-platform
========== END OF FILE: ./tickets/src/main/resources/application.properties ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/filters/UserProvisioningFilter.java ==========
package com.prp.tickets.filters;

import com.prp.tickets.domain.entities.User;
import com.prp.tickets.repositories.UserRepository;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.UUID;

@Component
@RequiredArgsConstructor
public class UserProvisioningFilter
  extends OncePerRequestFilter {
  
  private final UserRepository userRepository;
  
  @Override
  protected void doFilterInternal(
	HttpServletRequest request,
	HttpServletResponse response,
	FilterChain filterChain) throws
							 ServletException,
							 IOException {
	
	Authentication authentication = SecurityContextHolder
									  .getContext()
									  .getAuthentication();
	
	if (authentication != null && authentication.isAuthenticated() && authentication.getPrincipal() instanceof Jwt jwt) {
	  // Extract the user ID from the JWT subject
	  UUID keycloakId = UUID.fromString(jwt.getSubject());
	  if (!userRepository.existsById(keycloakId)) {
		User user = new User();
		user.setId(keycloakId);
		user.setName(jwt.getClaimAsString("preferred_username"));
		user.setEmail(jwt.getClaimAsString("email"));
		userRepository.save(user);
	  }
	}
	
	filterChain.doFilter(request, response);
  }
}
========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/filters/UserProvisioningFilter.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/TicketsApplication.java ==========
package com.prp.tickets;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class TicketsApplication {

	public static void main(String[] args) {
		SpringApplication.run(TicketsApplication.class, args);
	}

}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/TicketsApplication.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/util/JwtUtil.java ==========
package com.prp.tickets.util;

import org.springframework.security.oauth2.jwt.Jwt;

import java.util.UUID;

public final class JwtUtil {
   private JwtUtil() {}
  
  public static UUID parseUserId(Jwt jwt) {
	return UUID.fromString(jwt.getSubject());
  }
  
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/util/JwtUtil.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/config/JpaConfiguration.java ==========
package com.prp.tickets.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;

@Configuration
@EnableJpaAuditing
public class JpaConfiguration {

}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/config/JpaConfiguration.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/config/SecurityConfig.java ==========
package com.prp.tickets.config;


import com.prp.tickets.filters.UserProvisioningFilter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import org.springframework.http.HttpMethod;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {
  
  @Bean
  public SecurityFilterChain filterChain(
	HttpSecurity http,
	UserProvisioningFilter userProvisioningFilter,
	JwtAuthenticationConverter jwtAuthenticationConverter) throws Exception {
	http
	  .authorizeHttpRequests(authorize -> authorize
											.requestMatchers(HttpMethod.GET, "/api/v1/published-events/**")
											.permitAll()
											.requestMatchers(HttpMethod.GET, "/api/v1/events")
											.hasRole("ORGANIZER")
											.requestMatchers("/api/v1/ticket-validations")
											.hasRole("STAFF")
											.anyRequest()
											.authenticated())
	  .csrf(csrf -> csrf.disable())
	  .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
	  .oauth2ResourceServer(oauth2 -> oauth2.jwt(jwt -> jwt.jwtAuthenticationConverter(jwtAuthenticationConverter)))
	  .addFilterAfter(userProvisioningFilter, BearerTokenAuthenticationFilter.class);
	return http.build();
  }
  
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/config/SecurityConfig.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/config/JwtAuthenticationConverter.java ==========
package com.prp.tickets.config;

import org.springframework.core.convert.converter.Converter;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationToken;
import org.springframework.stereotype.Component;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Component
public class JwtAuthenticationConverter
  implements Converter<Jwt, JwtAuthenticationToken> {
  @Override
  public JwtAuthenticationToken convert(Jwt jwt) {
	Collection<GrantedAuthority> authorities = extractAuthorities(jwt);
	return new JwtAuthenticationToken(jwt, authorities);
  }
  
  private Collection<GrantedAuthority> extractAuthorities(Jwt jwt) {
	Map<String, Object> realmAccess = jwt.getClaim("realm_access");
	if (null == realmAccess || !realmAccess.containsKey("roles")) {
	  return Collections.emptyList();
	}
	@SuppressWarnings("unchecked") List<String> roles = (List<String>) realmAccess.get("roles");
	return roles
			 .stream()
			 .filter(role -> role.startsWith("ROLE_"))
			 .map(SimpleGrantedAuthority::new)
			 .collect(Collectors.toList());
  }
}
========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/config/JwtAuthenticationConverter.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/config/QrCodeConfig.java ==========
package com.prp.tickets.config;

import com.google.zxing.qrcode.QRCodeWriter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class QrCodeConfig {
  @Bean
  public QRCodeWriter qrCodeWriter() {
	return new QRCodeWriter();
  }
}
========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/config/QrCodeConfig.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/repositories/TicketValidationRepository.java ==========
package com.prp.tickets.repositories;

import com.prp.tickets.domain.entities.TicketValidation;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.UUID;

@Repository
public interface TicketValidationRepository
  extends JpaRepository<TicketValidation, UUID> {}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/repositories/TicketValidationRepository.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/repositories/QrCodeRepository.java ==========
package com.prp.tickets.repositories;

import com.prp.tickets.domain.entities.QrCode;
import com.prp.tickets.domain.enums.QrCodeStatusEnum;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;
import java.util.UUID;

@Repository
public interface QrCodeRepository extends JpaRepository<QrCode, UUID> {
  Optional<QrCode> findByTicketIdAndTicketPurchaserId(UUID ticketId, UUID ticketPurchaseId);
  Optional<QrCode> findByIdAndStatus(UUID id, QrCodeStatusEnum qrCodeStatusEnum);
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/repositories/QrCodeRepository.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/repositories/TicketRepository.java ==========
package com.prp.tickets.repositories;

import com.prp.tickets.domain.entities.Ticket;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;
import java.util.UUID;

@Repository
public interface TicketRepository extends JpaRepository<Ticket, UUID> {
  int countByTicketTypeId(UUID ticketTypeId);
  Page<Ticket> findByPurchaserId(UUID purchaserId, Pageable pageable);
  Optional<Ticket> findByIdAndPurchaserId(UUID id, UUID purchaserId);
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/repositories/TicketRepository.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/repositories/EventRepository.java ==========
package com.prp.tickets.repositories;

import com.prp.tickets.domain.entities.Event;
import com.prp.tickets.domain.enums.EventStatusEnum;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.Optional;
import java.util.UUID;

@Repository
public interface EventRepository
  extends CrudRepository<Event, UUID> {
  Page<Event> findByOrganizerId(UUID organizerId, Pageable pageable);
  
  Optional<Event> findByIdAndOrganizerId(UUID id, UUID organizerId);
  
  Page<Event> findByStatus(EventStatusEnum status, Pageable pageable);
  
  @Query(value = "SELECT * FROM events WHERE " + "status = 'PUBLISHED' AND " + "to_tsvector('english', COALESCE(name, '') || ' ' || COALESCE(venue, '')) " + "@@ plainto_tsquery('english', :searchTerm)", countQuery = "SELECT count(*) FROM events WHERE " + "status = 'PUBLISHED' AND " + "to_tsvector('english', COALESCE(name, '') || ' ' || COALESCE(venue, '')) " + "@@ plainto_tsquery('english', :searchTerm)", nativeQuery = true)
  Page<Event> searchEvents(@Param("searchTerm") String searchTerm, Pageable pageable);
  
  Optional<Event> findByIdAndStatus(UUID eventId,  EventStatusEnum status);
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/repositories/EventRepository.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/repositories/TicketTypeRepository.java ==========
package com.prp.tickets.repositories;

import com.prp.tickets.domain.entities.TicketType;
import jakarta.persistence.LockModeType;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Lock;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.Optional;
import java.util.UUID;

@Repository
public interface TicketTypeRepository
  extends JpaRepository<TicketType, UUID> {
  @Query("SELECT tt FROM TicketType tt WHERE tt.id = :id")
  @Lock(LockModeType.PESSIMISTIC_WRITE)
  Optional<TicketType> findByIdWithLock(@Param("id") UUID id);
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/repositories/TicketTypeRepository.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/repositories/UserRepository.java ==========
package com.prp.tickets.repositories;

import com.prp.tickets.domain.entities.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.UUID;

@Repository
public interface UserRepository extends JpaRepository<User, UUID> {

}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/repositories/UserRepository.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/controller/TicketValidationController.java ==========
package com.prp.tickets.controller;

import com.prp.tickets.domain.dto.TicketValidationRequestDto;
import com.prp.tickets.domain.dto.TicketValidationResponseDto;
import com.prp.tickets.domain.entities.TicketValidation;
import com.prp.tickets.domain.enums.TicketValidationMethod;
import com.prp.tickets.mappers.TicketValidationMapper;
import com.prp.tickets.services.TicketValidationService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(path = "/api/v1/ticket-validations")
@RequiredArgsConstructor
public class TicketValidationController {
  private final TicketValidationService ticketValidationService;
  private final TicketValidationMapper ticketValidationMapper;
  
  @PostMapping
  public ResponseEntity<TicketValidationResponseDto> validateTicket(
	@RequestBody TicketValidationRequestDto ticketValidationRequestDto) {
	TicketValidationMethod method = ticketValidationRequestDto.getMethod();
	TicketValidation ticketValidation;
	if (TicketValidationMethod.MANUAL.equals(method)) {
	  ticketValidation = ticketValidationService.validateTicketManually(ticketValidationRequestDto.getId());
	} else {
	  ticketValidation = ticketValidationService.validateTicketByQrCode(ticketValidationRequestDto.getId());
	}
	return ResponseEntity.ok(ticketValidationMapper.toTicketValidationResponseDto(ticketValidation));
  }
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/controller/TicketValidationController.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/controller/TicketController.java ==========
package com.prp.tickets.controller;


import com.prp.tickets.domain.dto.GetTicketResponseDto;
import com.prp.tickets.domain.dto.ListTicketResponseDto;
import com.prp.tickets.mappers.TicketMapper;
import com.prp.tickets.services.QrCodeService;
import com.prp.tickets.services.TicketService;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.UUID;

import static com.prp.tickets.util.JwtUtil.parseUserId;

@RestController
@RequestMapping(path = "/api/v1/tickets")
@RequiredArgsConstructor
public class TicketController {
  
  private final TicketService ticketService;
  private final TicketMapper ticketMapper;
  private final QrCodeService qrCodeService;
  
  @GetMapping
  public Page<ListTicketResponseDto> listTickets(@AuthenticationPrincipal Jwt jwt, Pageable pageable) {
	return ticketService
			 .listTicketsForUser(parseUserId(jwt), pageable)
			 .map(ticketMapper::toListTicketResponseDto);
  }
  
  @GetMapping(path = "/{ticketId}")
  public ResponseEntity<GetTicketResponseDto> getTicket(@AuthenticationPrincipal Jwt jwt, @PathVariable UUID ticketId) {
	return ticketService
			 .getTicketForUser(parseUserId(jwt), ticketId)
			 .map(ticketMapper::toGetTicketResponseDto)
			 .map(ResponseEntity::ok)
			 .orElse(ResponseEntity
					   .notFound()
					   .build());
  }
  
  @GetMapping(path = "/{ticketId}/qr-codes")
  public ResponseEntity<byte[]> getTicketQrCode(@AuthenticationPrincipal Jwt jwt, @PathVariable UUID ticketId) {
	byte[] qrCodeImage = qrCodeService.getQrCodeImageForUserAndTicket(parseUserId(jwt), ticketId);
	HttpHeaders headers = new HttpHeaders();
	headers.setContentType(MediaType.IMAGE_PNG);
	headers.setContentLength(qrCodeImage.length);
	return ResponseEntity
			 .ok()
			 .headers(headers)
			 .body(qrCodeImage);
  }
  
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/controller/TicketController.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/controller/EventController.java ==========
package com.prp.tickets.controller;


import com.prp.tickets.domain.CreateEventRequest;
import com.prp.tickets.domain.UpdateEventRequest;
import com.prp.tickets.domain.dto.*;
import com.prp.tickets.domain.entities.Event;
import com.prp.tickets.mappers.EventMapper;
import com.prp.tickets.services.EventService;
import jakarta.persistence.EntityNotFoundException;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.web.bind.annotation.*;

import java.util.UUID;

import static com.prp.tickets.util.JwtUtil.parseUserId;

@RestController
@RequiredArgsConstructor
@RequestMapping(path = "/api/v1/events")
public class EventController {
  
  final EventService eventService;
  final EventMapper eventMapper;
  
  @PostMapping
  public ResponseEntity<CreateEventResponseDto> createEvent(
	@RequestBody @Valid CreateEventRequestDto createEventRequestDto,
	@AuthenticationPrincipal Jwt jwt) {
	CreateEventRequest createEventRequest = eventMapper.fromDto(createEventRequestDto);
	UUID userId = parseUserId(jwt);
	Event event = eventService.createEvent(userId, createEventRequest);
	CreateEventResponseDto toDto = eventMapper.toDto(event);
	return new ResponseEntity<>(toDto, HttpStatus.CREATED);
  }
  
  @GetMapping
  public ResponseEntity<Page<ListEventResponseDto>> listEvents(@AuthenticationPrincipal Jwt jwt, Pageable pageable) {
	UUID userId = parseUserId(jwt);
	Page<Event> events = eventService.listEventsForOrganizer(userId, pageable);
	return ResponseEntity.ok(events.map(eventMapper::toListEventResponseDto));
  }
  
  @GetMapping(path = "/{eventId}")
  public ResponseEntity<GetEventDetailsResponseDto> getEventDetails(
	@PathVariable UUID eventId,
	@AuthenticationPrincipal Jwt jwt) {
	UUID userId = parseUserId(jwt);
	return eventService
			 .getEventForOrganizer(userId, eventId)
			 .map(eventMapper::toGetEventDetailsResponseDto)
			 .map(ResponseEntity::ok)
			 .orElse(ResponseEntity
					   .notFound()
					   .build());
  }
  

  @PutMapping(path = "/{eventId}")
  public ResponseEntity<UpdateEventResponseDto> updateEvent(
	@RequestBody @Valid UpdateEventRequestDto updateEventRequestDto,
	@AuthenticationPrincipal Jwt jwt,
	@PathVariable UUID eventId) {
	UpdateEventRequest updateEventRequest = eventMapper.fromDto(updateEventRequestDto);
	UUID userId = parseUserId(jwt);
	Event event = eventService.updateEventForOrganizer(userId, eventId, updateEventRequest);
	UpdateEventResponseDto updateEventResponseDto = eventMapper.toUpdateEventResponseDto(event);
	return ResponseEntity.ok(updateEventResponseDto);
  }
  
  @DeleteMapping(path = "/{eventId}")
  public ResponseEntity<Void> deleteEvent(@PathVariable UUID eventId, @AuthenticationPrincipal Jwt jwt) {
	UUID userId = parseUserId(jwt);
	eventService.deleteEventForOrganizer(userId, eventId);
	return ResponseEntity
			 .noContent()
			 .build();
  }
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/controller/EventController.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/controller/TicketTypeController.java ==========
package com.prp.tickets.controller;


import com.prp.tickets.services.TicketTypeService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.UUID;

import static com.prp.tickets.util.JwtUtil.parseUserId;

@RestController
@RequiredArgsConstructor
@RequestMapping(path = "/api/v1/events/{eventId}/ticket-types")
public class TicketTypeController {
  
  private final TicketTypeService ticketTypeService;
  
  @PostMapping(path = "/{ticketTypeId}/tickets")
  public ResponseEntity<Void> purchaseTicket(
	@AuthenticationPrincipal Jwt jwt,
	@PathVariable UUID ticketTypeId,
	@PathVariable String eventId) {
	// Purchase the ticket using the service
	ticketTypeService.purchaseTicket(parseUserId(jwt), ticketTypeId);
	return new ResponseEntity<>(HttpStatus.NO_CONTENT);
  }
  
  
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/controller/TicketTypeController.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/controller/GlobalExceptionHandler.java ==========
package com.prp.tickets.controller;


import com.prp.tickets.domain.dto.ErrorDto;
import com.prp.tickets.exception.*;
import jakarta.validation.ConstraintViolationException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import java.util.List;

@RestControllerAdvice
@Slf4j
public class GlobalExceptionHandler {
  
  @ExceptionHandler(ConstraintViolationException.class)
  public ResponseEntity<ErrorDto> handleConstraintViolation(ConstraintViolationException ex) {
	log.error("Caught ConstraintViolationException", ex);
	String errorMessage = ex
							.getConstraintViolations()
							.stream()
							.findFirst()
							.map(violation -> violation.getPropertyPath() + ": " + violation.getMessage())
							.orElse("A constraint violation occurred");
	ErrorDto errorDto = new ErrorDto();
	errorDto.setError(errorMessage);
	return new ResponseEntity<>(errorDto, HttpStatus.BAD_REQUEST);
  }
  
  @ExceptionHandler(MethodArgumentNotValidException.class)
  public ResponseEntity<ErrorDto> handleMethodArgumentNotValidException(
	MethodArgumentNotValidException ex) {
	log.error("Caught MethodArgumentNotValidException", ex);
	ErrorDto errorDto = new ErrorDto();
	BindingResult bindingResult = ex.getBindingResult();
	List<FieldError> fieldErrors = bindingResult.getFieldErrors();
	String errorMessage = fieldErrors
							.stream()
							.findFirst()
							.map(fieldError -> fieldError.getField() + ": " + fieldError.getDefaultMessage())
							.orElse("Validation error occurred");
	errorDto.setError(errorMessage);
	return new ResponseEntity<>(errorDto, HttpStatus.BAD_REQUEST);
  }
  
  @ExceptionHandler(Exception.class)
  ResponseEntity<ErrorDto> handleException(Exception exception) {
	log.error("Error details: {}", exception.getMessage());
	ErrorDto errorDto = new ErrorDto();
	errorDto.setError("An unknown error occurred " + exception.getMessage());
	return new ResponseEntity<>(errorDto, HttpStatus.INTERNAL_SERVER_ERROR);
  }
  
  @ExceptionHandler(UserNotFoundException.class)
  public ResponseEntity<ErrorDto> handleUserNotFoundException(UserNotFoundException ex) {
	log.error("Caught UserNotFoundException", ex);
	ErrorDto errorDto = new ErrorDto();
	errorDto.setError("User not found");
	return new ResponseEntity<>(errorDto, HttpStatus.BAD_REQUEST);
  }
  
  
  @ExceptionHandler(EventNotFoundException.class)
  public ResponseEntity<ErrorDto> handleEventNotFoundException(EventNotFoundException ex) {
	log.error("Caught EventNotFoundException", ex);
	ErrorDto errorDto = new ErrorDto();
	errorDto.setError("Event not found");
	return new ResponseEntity<>(errorDto, HttpStatus.BAD_REQUEST);
  }
  
  @ExceptionHandler(TicketTypeNotFoundException.class)
  public ResponseEntity<ErrorDto> handleTicketTypeNotFoundException(TicketTypeNotFoundException ex) {
	log.error("Caught TicketTypeNotFoundException", ex);
	ErrorDto errorDto = new ErrorDto();
	errorDto.setError("Ticket Type not found");
	return new ResponseEntity<>(errorDto, HttpStatus.BAD_REQUEST);
  }
  
  @ExceptionHandler(EventUpdateException.class)
  public ResponseEntity<ErrorDto> handleEventUpdateException(EventUpdateException ex) {
	log.error("Caught EventUpdateException", ex);
	ErrorDto errorDto = new ErrorDto();
	errorDto.setError("Unable to update event");
	return new ResponseEntity<>(errorDto, HttpStatus.BAD_REQUEST);
  }
  
  @ExceptionHandler(QrCodeGenerationException.class)
  public ResponseEntity<ErrorDto> handleQrCodeGenerationException(QrCodeGenerationException ex) {
	log.error("Caught QrCodeGenerationException", ex);
	ErrorDto errorDto = new ErrorDto();
	errorDto.setError("Unable to generate qrcode");
	return new ResponseEntity<>(errorDto, HttpStatus.BAD_REQUEST);
  }
  
  @ExceptionHandler(QrCodeNotFoundException.class)
  public ResponseEntity<ErrorDto> handleQrCodeNotFoundException(QrCodeNotFoundException ex) {
	log.error("Caught QrCodeNotFoundException", ex);
	ErrorDto errorDto = new ErrorDto();
	errorDto.setError("Unable to generate qrcode");
	return new ResponseEntity<>(errorDto, HttpStatus.INTERNAL_SERVER_ERROR);
  }
  
  @ExceptionHandler(TicketSoldOutException.class)
  public ResponseEntity<ErrorDto> handleTicketSoldOutException(TicketSoldOutException ex) {
	log.error("Caught TicketSoldOutException", ex);
	ErrorDto errorDto = new ErrorDto();
	errorDto.setError("Unable to generate qrcode");
	return new ResponseEntity<>(errorDto, HttpStatus.INTERNAL_SERVER_ERROR);
  }
  
  @ExceptionHandler(TicketNotFoundException.class)
  public ResponseEntity<ErrorDto> handleTicketNotFoundException(TicketNotFoundException ex) {
	log.error("Caught TicketNotFoundException", ex);
	ErrorDto errorDto = new ErrorDto();
	errorDto.setError("Ticket not found");
	return new ResponseEntity<>(errorDto, HttpStatus.BAD_REQUEST);
  }
  
  
  
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/controller/GlobalExceptionHandler.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/controller/PublishedEventController.java ==========
package com.prp.tickets.controller;

import com.prp.tickets.domain.dto.GetPublishedEventDetailsResponseDto;
import com.prp.tickets.domain.dto.ListPublishedEventResponseDto;
import com.prp.tickets.domain.entities.Event;
import com.prp.tickets.mappers.EventMapper;
import com.prp.tickets.services.EventService;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.UUID;

@RestController
@RequiredArgsConstructor
@RequestMapping(path = "/api/v1/published-events")
public class PublishedEventController {
  
  private final EventService eventService;
  private final EventMapper eventMapper;
  
  @GetMapping
  public ResponseEntity<Page<ListPublishedEventResponseDto>> listPublishedEvents(
	@RequestParam(required = false) String q,
	Pageable pageable) {
	Page<Event> events;
	if (null != q && !q
						.trim()
						.isEmpty()) {
	  events = eventService.searchPublicEvents(q, pageable);
	} else {
	  events = eventService.listPublicEvents(pageable);
	}
	return ResponseEntity.ok(events.map(eventMapper::toListPublishedEventResponseDto));
  }
  
  @GetMapping(path = "/{eventId}")
  public ResponseEntity<GetPublishedEventDetailsResponseDto> getPublishedEventDetails(
	@PathVariable UUID eventId) {
	return eventService
			 .getPublicEvent(eventId)
			 .map(eventMapper::toGetPublishedEventDetailsResponseDto)
			 .map(ResponseEntity::ok)
			 .orElse(ResponseEntity
					   .notFound()
					   .build());
  }
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/controller/PublishedEventController.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/mappers/EventMapper.java ==========
package com.prp.tickets.mappers;

import com.prp.tickets.domain.CreateEventRequest;
import com.prp.tickets.domain.CreateTicketTypeRequest;
import com.prp.tickets.domain.UpdateEventRequest;
import com.prp.tickets.domain.UpdateTicketTypeRequest;
import com.prp.tickets.domain.dto.*;
import com.prp.tickets.domain.entities.Event;
import com.prp.tickets.domain.entities.TicketType;
import org.mapstruct.Mapper;
import org.mapstruct.ReportingPolicy;

@Mapper(componentModel = "spring", unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface EventMapper {
  CreateTicketTypeRequest fromDto(CreateTicketTypeRequestDto dto);
  
  CreateEventRequest fromDto(CreateEventRequestDto dto);
  
  CreateEventResponseDto toDto(Event event);
  
  ListEventTicketTypeResponseDto toDto(TicketType ticketType);
  
  ListEventResponseDto toListEventResponseDto(Event event);
  
  GetEventDetailsTicketTypesResponseDto toGetEventDetailsTicketTypesResponseDto(TicketType ticketType);
  
  GetEventDetailsResponseDto toGetEventDetailsResponseDto(Event event);
  
  UpdateTicketTypeRequest fromDto(UpdateTicketTypeRequestDto dto);
  
  UpdateEventRequest fromDto(UpdateEventRequestDto dto);
  
  UpdateTicketTypeResponseDto toUpdateTicketTypeResponseDto(TicketType ticketType);
  
  UpdateEventResponseDto toUpdateEventResponseDto(Event event);
  
  ListPublishedEventResponseDto toListPublishedEventResponseDto(Event event);
  
  GetPublishedEventDetailsTicketTypesResponseDto toGetPublishedEventDetailsTicketTypesResponseDto(TicketType ticketType);
  
  GetPublishedEventDetailsResponseDto toGetPublishedEventDetailsResponseDto(Event event);
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/mappers/EventMapper.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/mappers/TicketValidationMapper.java ==========
package com.prp.tickets.mappers;

import com.prp.tickets.domain.dto.TicketValidationResponseDto;
import com.prp.tickets.domain.entities.TicketValidation;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.ReportingPolicy;

@Mapper(componentModel = "spring", unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface TicketValidationMapper {
  @Mapping(target = "ticketId", source = "ticket.id")
  TicketValidationResponseDto toTicketValidationResponseDto(TicketValidation ticketValidation);
}
========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/mappers/TicketValidationMapper.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/mappers/TicketMapper.java ==========
package com.prp.tickets.mappers;


import com.prp.tickets.domain.dto.GetTicketResponseDto;
import com.prp.tickets.domain.dto.ListTicketResponseDto;
import com.prp.tickets.domain.dto.ListTicketTicketTypeResponseDto;
import com.prp.tickets.domain.entities.Ticket;
import com.prp.tickets.domain.entities.TicketType;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.ReportingPolicy;

@Mapper(componentModel = "spring", unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface TicketMapper {
  ListTicketTicketTypeResponseDto toListTicketTicketTypeResponseDto(TicketType ticketType);
  
  ListTicketResponseDto toListTicketResponseDto(Ticket ticket);
  
  @Mapping(target = "price", source = "ticket.ticketType.price")
  @Mapping(target = "description", source = "ticket.ticketType.description")
  @Mapping(target = "eventName", source = "ticket.ticketType.event.name")
  @Mapping(target = "eventVenue", source = "ticket.ticketType.event.venue")
  @Mapping(target = "eventStart", source = "ticket.ticketType.event.start")
  @Mapping(target = "eventEnd", source = "ticket.ticketType.event.end")
  GetTicketResponseDto toGetTicketResponseDto(Ticket ticket);
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/mappers/TicketMapper.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/GetPublishedEventDetailsResponseDto.java ==========
package com.prp.tickets.domain.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class GetPublishedEventDetailsResponseDto {
  private UUID id;
  private String name;
  private LocalDateTime start;
  private LocalDateTime end;
  private String venue;
  private List<GetPublishedEventDetailsTicketTypesResponseDto> ticketTypes = new ArrayList<>();
}
========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/GetPublishedEventDetailsResponseDto.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/CreateEventRequestDto.java ==========
package com.prp.tickets.domain.dto;

import com.prp.tickets.domain.enums.EventStatusEnum;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;


import java.time.LocalDateTime;
import java.util.List;

@AllArgsConstructor
@NoArgsConstructor
@Data
public class CreateEventRequestDto {
  @NotBlank(message = "Event name is required")
  private String name;
  
  private LocalDateTime start;
  
  private LocalDateTime end;
  
  @NotBlank(message = "Venue information is required")
  private String venue;
  
  private LocalDateTime salesStart;
  
  private LocalDateTime salesEnd;
  
  @NotNull(message = "Event status must be provided")
  private EventStatusEnum status;
  
  @NotEmpty(message = "At least one ticket type is required")
  @Valid
  private List<CreateTicketTypeRequestDto> ticketTypes;
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/CreateEventRequestDto.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/ErrorDto.java ==========
package com.prp.tickets.domain.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@NoArgsConstructor
@Data
public class ErrorDto {
  private String error;
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/ErrorDto.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/TicketValidationRequestDto.java ==========
package com.prp.tickets.domain.dto;

import com.prp.tickets.domain.enums.TicketValidationMethod;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.UUID;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class TicketValidationRequestDto {
  private UUID id;
  private TicketValidationMethod method;
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/TicketValidationRequestDto.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/UpdateEventResponseDto.java ==========
package com.prp.tickets.domain.dto;


import com.prp.tickets.domain.enums.EventStatusEnum;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class UpdateEventResponseDto {
  private UUID id;
  private String name;
  private LocalDateTime start;
  private LocalDateTime end;
  private String venue;
  private LocalDateTime salesStart;
  private LocalDateTime salesEnd;
  private EventStatusEnum status;
  private List<UpdateTicketTypeResponseDto> ticketTypes;
  private LocalDateTime createdAt;
  private LocalDateTime updatedAt;
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/UpdateEventResponseDto.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/CreateEventResponseDto.java ==========
package com.prp.tickets.domain.dto;


import com.prp.tickets.domain.enums.EventStatusEnum;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class CreateEventResponseDto {
  private UUID id;
  private String name;
  private LocalDateTime start;
  private LocalDateTime end;
  private String venue;
  private LocalDateTime salesStart;
  private LocalDateTime salesEnd;
  private EventStatusEnum status;
  private List<CreateTicketTypeResponseDto> ticketTypes;
  private LocalDateTime createdAt;
  private LocalDateTime updatedAt;
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/CreateEventResponseDto.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/UpdateTicketTypeRequestDto.java ==========
package com.prp.tickets.domain.dto;


import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.PositiveOrZero;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.UUID;

@AllArgsConstructor
@NoArgsConstructor
@Data
public class UpdateTicketTypeRequestDto {
  
  private UUID id;
  
  @NotBlank(message = "Ticket type name is required")
  private String name;
  
  @NotNull(message = "Price is required")
  @PositiveOrZero(message = "Price must be zero or greater")
  private Double price;
  
  private String description;
  
  private Integer totalAvailable;
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/UpdateTicketTypeRequestDto.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/ListTicketResponseDto.java ==========
package com.prp.tickets.domain.dto;


import com.prp.tickets.domain.enums.TicketStatusEnum;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.UUID;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class ListTicketResponseDto {
  private UUID id;
  private TicketStatusEnum status;
  private ListTicketTicketTypeResponseDto ticketType;
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/ListTicketResponseDto.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/ListPublishedEventResponseDto.java ==========
package com.prp.tickets.domain.dto;


import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.UUID;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class ListPublishedEventResponseDto {
  private UUID id;
  private String name;
  private LocalDateTime start;
  private LocalDateTime end;
  private String venue;
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/ListPublishedEventResponseDto.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/GetEventDetailsTicketTypesResponseDto.java ==========
package com.prp.tickets.domain.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.UUID;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class GetEventDetailsTicketTypesResponseDto {
  private UUID id;
  private String name;
  private Double price;
  private String description;
  private Integer totalAvailable;
  private LocalDateTime createdAt;
  private LocalDateTime updatedAt;
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/GetEventDetailsTicketTypesResponseDto.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/ListEventResponseDto.java ==========
package com.prp.tickets.domain.dto;


import com.prp.tickets.domain.enums.EventStatusEnum;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class ListEventResponseDto {
  private UUID id;
  private String name;
  private LocalDateTime start;
  private LocalDateTime end;
  private String venue;
  private LocalDateTime salesStart;
  private LocalDateTime salesEnd;
  private EventStatusEnum status;
  private List<ListEventTicketTypeResponseDto> ticketTypes = new ArrayList<>();
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/ListEventResponseDto.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/CreateTicketTypeRequestDto.java ==========
package com.prp.tickets.domain.dto;


import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.PositiveOrZero;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@NoArgsConstructor
@Data
public class CreateTicketTypeRequestDto {
  @NotBlank(message = "Ticket type name is required")
  private String name;
  
  @NotNull(message = "Price is required")
  @PositiveOrZero(message = "Price must be zero or greater")
  private Double price;
  
  private String description;
  
  private Integer totalAvailable;
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/CreateTicketTypeRequestDto.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/UpdateEventRequestDto.java ==========
package com.prp.tickets.domain.dto;

import com.prp.tickets.domain.enums.EventStatusEnum;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

@AllArgsConstructor
@NoArgsConstructor
@Data
public class UpdateEventRequestDto {
  
  @NotNull(message = "Event Id must be provided")
  private UUID id;
  
  @NotBlank(message = "Event name is required")
  private String name;
  
  private LocalDateTime start;
  
  private LocalDateTime end;
  
  @NotBlank(message = "Venue information is required")
  private String venue;
  
  private LocalDateTime salesStart;
  
  private LocalDateTime salesEnd;
  
  @NotNull(message = "Event status must be provided")
  private EventStatusEnum status;
  
  @NotEmpty(message = "At least one ticket type is required")
  @Valid
  private List<UpdateTicketTypeRequestDto> ticketTypes;
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/UpdateEventRequestDto.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/TicketValidationResponseDto.java ==========
package com.prp.tickets.domain.dto;

import com.prp.tickets.domain.enums.TicketValidationStatusEnum;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.UUID;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class TicketValidationResponseDto {
  private UUID ticketId;
  private TicketValidationStatusEnum status;
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/TicketValidationResponseDto.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/UpdateTicketTypeResponseDto.java ==========
package com.prp.tickets.domain.dto;


import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.UUID;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class UpdateTicketTypeResponseDto {
	private UUID id;
	private String name;
	private String description;
	private Double price;
	private Integer totalAvailable;
	private LocalDateTime createdAt;
	private LocalDateTime updatedAt;
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/UpdateTicketTypeResponseDto.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/GetPublishedEventDetailsTicketTypesResponseDto.java ==========
package com.prp.tickets.domain.dto;


import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.UUID;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class GetPublishedEventDetailsTicketTypesResponseDto {
  private UUID id;
  private String name;
  private Double price;
  private String description;
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/GetPublishedEventDetailsTicketTypesResponseDto.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/GetEventDetailsResponseDto.java ==========
package com.prp.tickets.domain.dto;

import com.prp.tickets.domain.enums.EventStatusEnum;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class GetEventDetailsResponseDto {
  private UUID id;
  private String name;
  private LocalDateTime start;
  private LocalDateTime end;
  private String venue;
  private LocalDateTime salesStart;
  private LocalDateTime salesEnd;
  private EventStatusEnum status;
  private List<GetEventDetailsTicketTypesResponseDto> ticketTypes = new ArrayList<>();
  private LocalDateTime createdAt;
  private LocalDateTime updatedAt;
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/GetEventDetailsResponseDto.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/ListTicketTicketTypeResponseDto.java ==========
package com.prp.tickets.domain.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.UUID;

@AllArgsConstructor
@NoArgsConstructor
@Data
public class ListTicketTicketTypeResponseDto {
  private UUID id;
  private String name;
  private Double price;
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/ListTicketTicketTypeResponseDto.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/CreateTicketTypeResponseDto.java ==========
package com.prp.tickets.domain.dto;


import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.UUID;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class CreateTicketTypeResponseDto {
	private UUID id;
	private String name;
	private String description;
	private Double price;
	private Integer totalAvailable;
	private LocalDateTime createdAt;
	private LocalDateTime updatedAt;
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/CreateTicketTypeResponseDto.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/ListEventTicketTypeResponseDto.java ==========
package com.prp.tickets.domain.dto;


import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.UUID;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class ListEventTicketTypeResponseDto {
  private UUID id;
  private String name;
  private Double price;
  private String description;
  private Integer totalAvailable;
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/ListEventTicketTypeResponseDto.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/GetTicketResponseDto.java ==========
package com.prp.tickets.domain.dto;

import com.prp.tickets.domain.enums.TicketStatusEnum;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.UUID;


@Data
@AllArgsConstructor
@NoArgsConstructor
public class GetTicketResponseDto {
  private UUID id;
  private TicketStatusEnum status;
  private Double price;
  private String description;
  private String eventName;
  private String eventVenue;
  private LocalDateTime eventStart;
  private LocalDateTime eventEnd;
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/dto/GetTicketResponseDto.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/UpdateTicketTypeRequest.java ==========
package com.prp.tickets.domain;


import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.UUID;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
public class UpdateTicketTypeRequest {
  private UUID id;
  private String name;
  private Double price;
  private String description;
  private Integer totalAvailable;
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/UpdateTicketTypeRequest.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/enums/EventStatusEnum.java ==========
package com.prp.tickets.domain.enums;

public enum EventStatusEnum {
  DRAFT, // Initial state when creating an event
  PUBLISHED, // Event is live and tickets can be purchased
  CANCELLED, // Event will not take place
  COMPLETED // Event has finished
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/enums/EventStatusEnum.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/enums/TicketValidationMethod.java ==========
package com.prp.tickets.domain.enums;

public enum TicketValidationMethod {
  QR_SCAN, // Ticket validated via QR code scan
  MANUAL // Ticket validated via manual entry
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/enums/TicketValidationMethod.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/enums/TicketValidationStatusEnum.java ==========
package com.prp.tickets.domain.enums;

public enum TicketValidationStatusEnum {
  VALID, // Ticket is valid for entry
  INVALID, // Ticket is not valid
  EXPIRED // Ticket has expired
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/enums/TicketValidationStatusEnum.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/enums/QrCodeStatusEnum.java ==========
package com.prp.tickets.domain.enums;

public enum QrCodeStatusEnum {
  ACTIVE, // QR code can be used
  EXPIRED // QR code has been invalidated
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/enums/QrCodeStatusEnum.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/enums/TicketStatusEnum.java ==========
package com.prp.tickets.domain.enums;

public enum TicketStatusEnum {
  PURCHASED, // Default state when ticket is bought
  CANCELLED // Ticket has been cancelled
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/enums/TicketStatusEnum.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/CreateTicketTypeRequest.java ==========
package com.prp.tickets.domain;


import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
public class CreateTicketTypeRequest {
  private String name;
  private Double price;
  private String description;
  private Integer totalAvailable;
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/CreateTicketTypeRequest.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/CreateEventRequest.java ==========
package com.prp.tickets.domain;

import com.prp.tickets.domain.entities.User;
import com.prp.tickets.domain.enums.EventStatusEnum;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class CreateEventRequest {
  private String name;
  private LocalDateTime start;
  private LocalDateTime end;
  private String venue;
  private LocalDateTime salesStart;
  private LocalDateTime salesEnd;
  private EventStatusEnum status;
  private List<CreateTicketTypeRequest> ticketTypes = new ArrayList<>();
}
========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/CreateEventRequest.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/entities/QrCode.java ==========
package com.prp.tickets.domain.entities;

import com.prp.tickets.domain.enums.QrCodeStatusEnum;
import jakarta.persistence.*;
import lombok.*;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;

import java.time.LocalDateTime;
import java.util.Objects;
import java.util.UUID;

@Entity
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@Builder
@Table(name = "qr_codes")
public class QrCode {
  @Id
  @Column(name = "id", nullable = false, updatable = false)
  private UUID id;
  
  @Column(name = "status", nullable = false)
  @Enumerated(EnumType.STRING)
  private QrCodeStatusEnum status;
  
  @Column(name = "value", columnDefinition = "TEXT",nullable = false)
  private String value;
  
  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "ticket_id")
  private Ticket ticket;
  @CreatedDate
  @Column(name = "created_at", updatable = false, nullable = false)
  private LocalDateTime createdAt;
  @LastModifiedDate
  @Column(name = "updated_at", nullable = false)
  private LocalDateTime updatedAt;
  
  @Override
  public boolean equals(Object o) {
	if (o == null || getClass() != o.getClass())
	  return false;
	QrCode qrCode = (QrCode) o;
	return Objects.equals(id, qrCode.id) && status == qrCode.status && Objects.equals(
	  value, qrCode.value) && Objects.equals(createdAt, qrCode.createdAt) && Objects.equals(
	  updatedAt, qrCode.updatedAt);
  }
  
  @Override
  public int hashCode() {
	return Objects.hash(id, status, value, createdAt, updatedAt);
  }
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/entities/QrCode.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/entities/TicketType.java ==========
package com.prp.tickets.domain.entities;


import jakarta.persistence.*;
import lombok.*;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Table(name = "ticket_types")
public class TicketType {
  @Id
  @Column(name = "id", nullable = false, updatable = false)
  @GeneratedValue(strategy = GenerationType.UUID)
  private UUID id;
  
  @Column(name = "name", nullable = false)
  private String name;
  
  @Column(name = "price", nullable = false)
  private Double price;
  
  @Column(name = "description", nullable = false)
  private String description;
  
  @Column(name = "total_available")
  private Integer totalAvailable;
  
  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "event_id")
  private Event event;
  
  @OneToMany(mappedBy = "ticketType", cascade = CascadeType.ALL)
  private List<Ticket> tickets = new ArrayList<>();
  // TODO: Tickets
  @CreatedDate
  @Column(name = "created_at", updatable = false, nullable = false)
  private LocalDateTime createdAt;
  @LastModifiedDate
  @Column(name = "updated_at", nullable = false)
  private LocalDateTime updatedAt;
  
  @Override
  public boolean equals(Object o) {
	if (o == null || getClass() != o.getClass())
	  return false;
	TicketType that = (TicketType) o;
	return Objects.equals(id, that.id) && Objects.equals(name, that.name) && Objects.equals(
	  price, that.price) && Objects.equals(description, that.description) && Objects.equals(
	  totalAvailable, that.totalAvailable) && Objects.equals(createdAt, that.createdAt) && Objects.equals(
	  updatedAt, that.updatedAt);
  }
  
  @Override
  public int hashCode() {
	return Objects.hash(id, name, price, description, totalAvailable, createdAt, updatedAt);
  }
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/entities/TicketType.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/entities/User.java ==========
package com.prp.tickets.domain.entities;

import jakarta.persistence.*;
import lombok.*;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;


import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "users")
public class User {
  
  @Id
  @Column(name = "id", updatable = false, nullable = false)
  private UUID id;
  
  @Column(name = "name", nullable = false)
  private String name;
  
  @Column(name = "email", nullable = false)
  private String email;
  
  @OneToMany(mappedBy = "organizer", cascade = CascadeType.ALL)
  private List<Event> organizedEvents = new ArrayList<>();
  
  @ManyToMany
  @JoinTable(name = "user_attending_events", joinColumns = @JoinColumn(name = "user_id"), inverseJoinColumns = @JoinColumn(name = "event_id"))
  private List<Event> attendingEvents = new ArrayList<>();
  
  @ManyToMany
  @JoinTable(name = "user_staffing_events", joinColumns = @JoinColumn(name = "user_id"), inverseJoinColumns = @JoinColumn(name = "event_id"))
  private List<Event> staffingEvents = new ArrayList<>();
  
  @CreatedDate
  @Column(name = "created_at", updatable = false, nullable = false)
  private LocalDateTime createdAt;
  
  @LastModifiedDate
  @Column(name = "updated_at", nullable = false)
  private LocalDateTime updatedAt;
  
  @Override
  public boolean equals(Object o) {
	if (o == null || getClass() != o.getClass())
	  return false;
	User user = (User) o;
	return Objects.equals(id, user.id) && Objects.equals(name, user.name) && Objects.equals(
	  email, user.email) && Objects.equals(createdAt, user.createdAt) && Objects.equals(updatedAt, user.updatedAt);
  }
  
  @Override
  public int hashCode() {
	return Objects.hash(id, name, email, createdAt, updatedAt);
  }
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/entities/User.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/entities/Event.java ==========
package com.prp.tickets.domain.entities;

import com.prp.tickets.domain.enums.EventStatusEnum;
import jakarta.persistence.*;
import lombok.*;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;


@Entity
@Getter
@Setter
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "events")
public class Event {
  @Id
  @GeneratedValue(strategy = GenerationType.UUID)
  @Column(name = "id", updatable = false, nullable = false)
  private UUID id;
  
  @Column(name = "name", nullable = false)
  private String name;
  
  @Column(name = "event_start")
  private LocalDateTime start;
  
  @Column(name = "event_end")
  private LocalDateTime end;
  
  @Column(name = "venue", nullable = false)
  private String venue;
  
  @Column(name = "sales_start")
  private LocalDateTime salesStart;
  
  @Column(name = "sales_end")
  private LocalDateTime salesEnd;
  
  @Column(name = "status", nullable = false)
  @Enumerated(EnumType.STRING)
  private EventStatusEnum status;
  
  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "organizer_id")
  private User organizer;
  
  @ManyToMany(mappedBy = "attendingEvents")
  private List<User> attendees = new ArrayList<>();
  
  @ManyToMany(mappedBy = "staffingEvents")
  private List<User> staff = new ArrayList<>();
  
  @OneToMany(mappedBy = "event", cascade = CascadeType.ALL, orphanRemoval = true)
  private List<TicketType> ticketTypes = new ArrayList<>();
  
  @CreatedDate
  @Column(name = "created_at", updatable = false, nullable = false)
  private LocalDateTime createdAt;
  
  @LastModifiedDate
  @Column(name = "updated_at", nullable = false)
  private LocalDateTime updatedAt;
  
  @Override
  public boolean equals(Object o) {
	if (o == null || getClass() != o.getClass())
	  return false;
	Event event = (Event) o;
	return Objects.equals(id, event.id) && Objects.equals(name, event.name) && Objects.equals(
	  start, event.start) && Objects.equals(end, event.end) && Objects.equals(venue, event.venue) && Objects.equals(
	  salesStart, event.salesStart) && Objects.equals(
	  salesEnd, event.salesEnd) && status == event.status && Objects.equals(
	  createdAt, event.createdAt) && Objects.equals(updatedAt, event.updatedAt);
  }
  
  @Override
  public int hashCode() {
	return Objects.hash(id, name, start, end, venue, salesStart, salesEnd, status, createdAt, updatedAt);
  }
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/entities/Event.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/entities/Ticket.java ==========
package com.prp.tickets.domain.entities;


import com.prp.tickets.domain.enums.TicketStatusEnum;
import jakarta.persistence.*;
import lombok.*;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Table(name = "tickets")
public class Ticket {
  
  @Id
  @Column(name = "id", nullable = false, updatable = false)
  @GeneratedValue(strategy = GenerationType.UUID)
  private UUID id;
  
  @Column(name = "status", nullable = false)
  @Enumerated(EnumType.STRING)
  private TicketStatusEnum status;
  
  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "ticket_type_id")
  private TicketType ticketType;
  
  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "purchaser_id")
  private User purchaser;
  
  @OneToMany(mappedBy = "ticket", cascade = CascadeType.ALL)
  private List<TicketValidation> validations = new ArrayList<>();
  
  @OneToMany(mappedBy = "ticket", cascade = CascadeType.ALL)
  private List<QrCode> qrCodes = new ArrayList<>();
  @CreatedDate
  @Column(name = "created_at", updatable = false, nullable = false)
  private LocalDateTime createdAt;
  @LastModifiedDate
  @Column(name = "updated_at", nullable = false)
  private LocalDateTime updatedAt;
  
  @Override
  public boolean equals(Object o) {
	if (o == null || getClass() != o.getClass())
	  return false;
	Ticket ticket = (Ticket) o;
	return Objects.equals(id, ticket.id) && status == ticket.status && Objects.equals(
	  createdAt, ticket.createdAt) && Objects.equals(updatedAt, ticket.updatedAt);
  }
  
  @Override
  public int hashCode() {
	return Objects.hash(id, status, createdAt, updatedAt);
  }
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/entities/Ticket.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/entities/TicketValidation.java ==========
package com.prp.tickets.domain.entities;

import com.prp.tickets.domain.enums.TicketValidationMethod;
import com.prp.tickets.domain.enums.TicketValidationStatusEnum;
import jakarta.persistence.*;
import lombok.*;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;

import java.time.LocalDateTime;
import java.util.Objects;
import java.util.UUID;

@Entity
@Table(name = "ticket_validations")
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Builder
public class TicketValidation {
  @Id
  @Column(name = "id", nullable = false, updatable = false)
  @GeneratedValue(strategy = GenerationType.UUID)
  private UUID id;
  
  @Column(name = "status", nullable = false)
  @Enumerated(EnumType.STRING)
  private TicketValidationStatusEnum status;
  
  @Column(name = "validation_method", nullable = false)
  @Enumerated(EnumType.STRING)
  private TicketValidationMethod validationMethod;
  
  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "ticket_id")
  private Ticket ticket;
  
  @CreatedDate
  @Column(name = "created_at", updatable = false, nullable = false)
  private LocalDateTime createdAt;
  @LastModifiedDate
  @Column(name = "updated_at", nullable = false)
  private LocalDateTime updatedAt;
  
  @Override
  public boolean equals(Object o) {
	if (o == null || getClass() != o.getClass())
	  return false;
	TicketValidation that = (TicketValidation) o;
	return Objects.equals(
	  id, that.id) && status == that.status && validationMethod == that.validationMethod && Objects.equals(
	  createdAt, that.createdAt) && Objects.equals(updatedAt, that.updatedAt);
  }
  
  @Override
  public int hashCode() {
	return Objects.hash(id, status, validationMethod, createdAt, updatedAt);
  }
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/entities/TicketValidation.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/domain/UpdateEventRequest.java ==========
package com.prp.tickets.domain;

import com.prp.tickets.domain.enums.EventStatusEnum;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class UpdateEventRequest {
  private UUID id;
  private String name;
  private LocalDateTime start;
  private LocalDateTime end;
  private String venue;
  private LocalDateTime salesStart;
  private LocalDateTime salesEnd;
  private EventStatusEnum status;
  private List<UpdateTicketTypeRequest> ticketTypes = new ArrayList<>();
}
========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/domain/UpdateEventRequest.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/exception/EventNotFoundException.java ==========
package com.prp.tickets.exception;

public class EventNotFoundException
  extends EventTicketException{
  public EventNotFoundException() {
  }
  
  public EventNotFoundException(String message) {
	super(message);
  }
  
  public EventNotFoundException(String message, Throwable cause) {
	super(message, cause);
  }
  
  public EventNotFoundException(Throwable cause) {
	super(cause);
  }
  
  public EventNotFoundException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
	super(message, cause, enableSuppression, writableStackTrace);
  }
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/exception/EventNotFoundException.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/exception/TicketSoldOutException.java ==========
package com.prp.tickets.exception;

public class TicketSoldOutException
  extends RuntimeException {
  public TicketSoldOutException() {
  }
  
  public TicketSoldOutException(String message) {
	super(message);
  }
  
  public TicketSoldOutException(String message, Throwable cause) {
	super(message, cause);
  }
  
  public TicketSoldOutException(Throwable cause) {
	super(cause);
  }
  
  public TicketSoldOutException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
	super(message, cause, enableSuppression, writableStackTrace);
  }
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/exception/TicketSoldOutException.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/exception/TicketTypeNotFoundException.java ==========
package com.prp.tickets.exception;

public class TicketTypeNotFoundException
  extends EventTicketException{
  public TicketTypeNotFoundException() {
  }
  
  public TicketTypeNotFoundException(String message) {
	super(message);
  }
  
  public TicketTypeNotFoundException(String message, Throwable cause) {
	super(message, cause);
  }
  
  public TicketTypeNotFoundException(Throwable cause) {
	super(cause);
  }
  
  public TicketTypeNotFoundException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
	super(message, cause, enableSuppression, writableStackTrace);
  }
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/exception/TicketTypeNotFoundException.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/exception/UserNotFoundException.java ==========
package com.prp.tickets.exception;

public class UserNotFoundException extends EventTicketException{
  public UserNotFoundException() {
  }
  
  public UserNotFoundException(String message) {
	super(message);
  }
  
  public UserNotFoundException(String message, Throwable cause) {
	super(message, cause);
  }
  
  public UserNotFoundException(Throwable cause) {
	super(cause);
  }
  
  public UserNotFoundException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
	super(message, cause, enableSuppression, writableStackTrace);
  }
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/exception/UserNotFoundException.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/exception/TicketNotFoundException.java ==========
package com.prp.tickets.exception;

public class TicketNotFoundException
  extends EventTicketException{
  public TicketNotFoundException() {
  }
  
  public TicketNotFoundException(String message) {
	super(message);
  }
  
  public TicketNotFoundException(String message, Throwable cause) {
	super(message, cause);
  }
  
  public TicketNotFoundException(Throwable cause) {
	super(cause);
  }
  
  public TicketNotFoundException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
	super(message, cause, enableSuppression, writableStackTrace);
  }
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/exception/TicketNotFoundException.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/exception/EventUpdateException.java ==========
package com.prp.tickets.exception;

public class EventUpdateException extends RuntimeException {
  
  public EventUpdateException() {
  }
  
  public EventUpdateException(String message) {
	super(message);
  }
  
  public EventUpdateException(String message, Throwable cause) {
	super(message, cause);
  }
  
  public EventUpdateException(Throwable cause) {
	super(cause);
  }
  
  public EventUpdateException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
	super(message, cause, enableSuppression, writableStackTrace);
  }
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/exception/EventUpdateException.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/exception/EventTicketException.java ==========
package com.prp.tickets.exception;

public class EventTicketException extends RuntimeException {
  public EventTicketException() {
  }
  
  public EventTicketException(String message) {
	super(message);
  }
  
  public EventTicketException(String message, Throwable cause) {
	super(message, cause);
  }
  
  public EventTicketException(Throwable cause) {
	super(cause);
  }
  
  public EventTicketException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
	super(message, cause, enableSuppression, writableStackTrace);
  }
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/exception/EventTicketException.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/exception/QrCodeGenerationException.java ==========
package com.prp.tickets.exception;

public class QrCodeGenerationException
  extends RuntimeException {
  public QrCodeGenerationException() {
  }
  
  public QrCodeGenerationException(String message) {
	super(message);
  }
  
  public QrCodeGenerationException(String message, Throwable cause) {
	super(message, cause);
  }
  
  public QrCodeGenerationException(Throwable cause) {
	super(cause);
  }
  
  public QrCodeGenerationException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
	super(message, cause, enableSuppression, writableStackTrace);
  }
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/exception/QrCodeGenerationException.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/exception/QrCodeNotFoundException.java ==========
package com.prp.tickets.exception;

public class QrCodeNotFoundException
  extends RuntimeException {
  public QrCodeNotFoundException() {
  }
  
  public QrCodeNotFoundException(String message) {
	super(message);
  }
  
  public QrCodeNotFoundException(String message, Throwable cause) {
	super(message, cause);
  }
  
  public QrCodeNotFoundException(Throwable cause) {
	super(cause);
  }
  
  public QrCodeNotFoundException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
	super(message, cause, enableSuppression, writableStackTrace);
  }
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/exception/QrCodeNotFoundException.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/services/impl/TicketTypeServiceImpl.java ==========
package com.prp.tickets.services.impl;

import com.prp.tickets.domain.entities.Ticket;
import com.prp.tickets.domain.entities.TicketType;
import com.prp.tickets.domain.entities.User;
import com.prp.tickets.domain.enums.TicketStatusEnum;
import com.prp.tickets.exception.TicketSoldOutException;
import com.prp.tickets.exception.TicketTypeNotFoundException;
import com.prp.tickets.exception.UserNotFoundException;
import com.prp.tickets.repositories.TicketRepository;
import com.prp.tickets.repositories.TicketTypeRepository;
import com.prp.tickets.repositories.UserRepository;
import com.prp.tickets.services.QrCodeService;
import com.prp.tickets.services.TicketTypeService;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.UUID;

@Service
@RequiredArgsConstructor
public class TicketTypeServiceImpl
  implements TicketTypeService {
  
  private final UserRepository userRepository;
  private final TicketTypeRepository ticketTypeRepository;
  private final TicketRepository ticketRepository;
  private final QrCodeService qrCodeService;
  
  @Override
  @Transactional
  public Ticket purchaseTicket(UUID userId, UUID ticketTypeId) {
	User user = userRepository
				  .findById(userId)
				  .orElseThrow(() -> new UserNotFoundException("User not found"));
	TicketType ticketType = ticketTypeRepository
							  .findByIdWithLock(ticketTypeId)
							  .orElseThrow(() -> new TicketTypeNotFoundException("Ticket type not found"));
	
	int purchasedTickets = ticketRepository.countByTicketTypeId(ticketType.getId());
	
	Integer totalAvailable = ticketType.getTotalAvailable();
	if (purchasedTickets + 1 > totalAvailable) {
	  throw new TicketSoldOutException();
	}
	
	Ticket ticket = new Ticket();
	ticket.setStatus(TicketStatusEnum.PURCHASED);
	ticket.setTicketType(ticketType);
	ticket.setPurchaser(user);
	Ticket savedTicket = ticketRepository.save(ticket);
	qrCodeService.generateQrCode(savedTicket);
	return ticketRepository.save(savedTicket);
	
	
  }
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/services/impl/TicketTypeServiceImpl.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/services/impl/QrCodeServiceImpl.java ==========
package com.prp.tickets.services.impl;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;
import com.prp.tickets.domain.entities.QrCode;
import com.prp.tickets.domain.entities.Ticket;
import com.prp.tickets.domain.enums.QrCodeStatusEnum;
import com.prp.tickets.exception.QrCodeGenerationException;
import com.prp.tickets.exception.QrCodeNotFoundException;
import com.prp.tickets.repositories.QrCodeRepository;
import com.prp.tickets.services.QrCodeService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Base64;
import java.util.UUID;


@Service
@Slf4j
@RequiredArgsConstructor
public class QrCodeServiceImpl
  implements QrCodeService {
  private static final int QR_HEIGHT = 300;
  private static final int QR_WIDTH = 300;
  private final QRCodeWriter qrCodeWriter;
  private final QrCodeRepository qrCodeRepository;
  
  @Override
  public QrCode generateQrCode(Ticket ticket) {
	try {
	  // Generate a unique ID for the QR code
	  UUID uniqueId = UUID.randomUUID();
	  String qrCodeImage = generateQrCodeImage(uniqueId);
	  // Create and save the QR code entity
	  QrCode qrCode = new QrCode();
	  qrCode.setId(uniqueId);
	  qrCode.setStatus(QrCodeStatusEnum.ACTIVE);
	  qrCode.setValue(qrCodeImage);
	  qrCode.setTicket(ticket);
	  return qrCodeRepository.saveAndFlush(qrCode);
	} catch (IOException | WriterException ex) {
	  throw new QrCodeGenerationException("Failed to generate QR Code", ex);
	}
  }
  
  @Override
  public byte[] getQrCodeImageForUserAndTicket(UUID userId, UUID ticketId) {
	QrCode qrCode = qrCodeRepository
					  .findByTicketIdAndTicketPurchaserId(ticketId, userId)
					  .orElseThrow(QrCodeNotFoundException::new);
	try {
	  return Base64
			   .getDecoder()
			   .decode(qrCode.getValue());
	} catch (IllegalArgumentException ex) {
	  log.error("Invalid base64 QR Code for ticket ID: {}", ticketId, ex);
	  throw new QrCodeNotFoundException();
	}
  }
  
  private String generateQrCodeImage(UUID uuid) throws WriterException, IOException {
	BitMatrix bitMatrix = qrCodeWriter.encode(uuid.toString(), BarcodeFormat.QR_CODE, QR_WIDTH, QR_HEIGHT);
	
	BufferedImage qrCodeImage = MatrixToImageWriter.toBufferedImage(bitMatrix);
	
	try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
	  ImageIO.write(qrCodeImage, "PNG", baos);
	  byte[] imageBytes = baos.toByteArray();
	  return Base64
			   .getEncoder()
			   .encodeToString(imageBytes);
	}
  }
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/services/impl/QrCodeServiceImpl.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/services/impl/TicketValidationServiceImpl.java ==========
package com.prp.tickets.services.impl;

import com.prp.tickets.domain.entities.QrCode;
import com.prp.tickets.domain.entities.Ticket;
import com.prp.tickets.domain.entities.TicketValidation;
import com.prp.tickets.domain.enums.QrCodeStatusEnum;
import com.prp.tickets.domain.enums.TicketValidationMethod;
import com.prp.tickets.domain.enums.TicketValidationStatusEnum;
import com.prp.tickets.exception.QrCodeNotFoundException;
import com.prp.tickets.exception.TicketNotFoundException;
import com.prp.tickets.repositories.QrCodeRepository;
import com.prp.tickets.repositories.TicketRepository;
import com.prp.tickets.repositories.TicketValidationRepository;
import com.prp.tickets.services.TicketValidationService;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.UUID;

@Service
@Transactional
@RequiredArgsConstructor
public class TicketValidationServiceImpl
  implements TicketValidationService {
  
  private final TicketValidationRepository ticketValidationRepository;
  private final TicketRepository ticketRepository;
  private final QrCodeRepository qrCodeRepository;
  
  @Override
  public TicketValidation validateTicketByQrCode(UUID qrCodeId) {
	QrCode qrCode = qrCodeRepository
					  .findByIdAndStatus(qrCodeId, QrCodeStatusEnum.ACTIVE)
					  .orElseThrow(
						() -> new QrCodeNotFoundException(String.format("QR Code with ID %s was not found", qrCodeId)));
	Ticket ticket = qrCode.getTicket();
	return validateTicket(ticket);
  }
  
  @Override
  public TicketValidation validateTicketManually(UUID ticketId) {
	Ticket ticket = ticketRepository
					  .findById(ticketId)
					  .orElseThrow(
						() -> new TicketNotFoundException(String.format("Ticket with ID %s was not found", ticketId)));
	return validateTicket(ticket);
  }
  
  private TicketValidation validateTicket(Ticket ticket) {
	TicketValidation ticketValidation = new TicketValidation();
	ticketValidation.setTicket(ticket);
	ticketValidation.setValidationMethod(TicketValidationMethod.QR_SCAN);
	TicketValidationStatusEnum ticketValidationStatus = ticket
														  .getValidations()
														  .stream()
														  .filter(
															v -> TicketValidationStatusEnum.VALID.equals(v.getStatus()))
														  .findFirst()
														  .map(v -> TicketValidationStatusEnum.INVALID)
														  .orElse(TicketValidationStatusEnum.VALID);
	ticketValidation.setStatus(ticketValidationStatus);
	return ticketValidationRepository.save(ticketValidation);
  }
  
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/services/impl/TicketValidationServiceImpl.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/services/impl/EventServiceImpl.java ==========
package com.prp.tickets.services.impl;


import com.prp.tickets.domain.CreateEventRequest;
import com.prp.tickets.domain.UpdateEventRequest;
import com.prp.tickets.domain.UpdateTicketTypeRequest;
import com.prp.tickets.domain.entities.Event;
import com.prp.tickets.domain.entities.TicketType;
import com.prp.tickets.domain.entities.User;
import com.prp.tickets.domain.enums.EventStatusEnum;
import com.prp.tickets.exception.EventNotFoundException;
import com.prp.tickets.exception.EventUpdateException;
import com.prp.tickets.exception.TicketTypeNotFoundException;
import com.prp.tickets.exception.UserNotFoundException;
import com.prp.tickets.repositories.EventRepository;
import com.prp.tickets.repositories.UserRepository;
import com.prp.tickets.services.EventService;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class EventServiceImpl
  implements EventService {
  
  private final UserRepository userRepository;
  private final EventRepository eventRepository;
  
  @Override
  @Transactional
  public Event createEvent(UUID organizerId, CreateEventRequest event) {
	User organizer = userRepository
					   .findById(organizerId)
					   .orElseThrow(
						 () -> new UserNotFoundException(String.format("User with ID '%s' not found", organizerId)));
	
	Event eventToCreate = new Event();
	
	List<TicketType> ticketTypesToCreate = event
											 .getTicketTypes()
											 .stream()
											 .map(ticketType -> {
											   TicketType ticketTypeToCreate = new TicketType();
											   ticketTypeToCreate.setName(ticketType.getName());
											   ticketTypeToCreate.setPrice(ticketType.getPrice());
											   ticketTypeToCreate.setDescription(ticketType.getDescription());
											   ticketTypeToCreate.setTotalAvailable(ticketType.getTotalAvailable());
											   ticketTypeToCreate.setEvent(eventToCreate);
											   return ticketTypeToCreate;
											 })
											 .toList();
	
	eventToCreate.setName(event.getName());
	eventToCreate.setStart(event.getStart());
	eventToCreate.setEnd(event.getEnd());
	eventToCreate.setVenue(event.getVenue());
	eventToCreate.setSalesStart(event.getSalesStart());
	eventToCreate.setSalesEnd(event.getSalesEnd());
	eventToCreate.setStatus(event.getStatus());
	eventToCreate.setOrganizer(organizer);
	eventToCreate.setTicketTypes(ticketTypesToCreate);
	return eventRepository.save(eventToCreate);
  }
  
  @Override
  public Page<Event> listEventsForOrganizer(UUID organizerId, Pageable pageable) {
	return eventRepository.findByOrganizerId(organizerId, pageable);
  }
  
  @Override
  public Optional<Event> getEventForOrganizer(UUID organizerId, UUID eventId) {
	return eventRepository.findByIdAndOrganizerId(eventId, organizerId);
  }
  
  @Override
  @Transactional
  public Event updateEventForOrganizer(UUID organizerId, UUID eventId, UpdateEventRequest event) {
	if (event.getId() == null)
	  throw new EventUpdateException("Event id can not be null");
	
	if (!eventId.equals(event.getId())) {
	  throw new EventUpdateException("Event id does not match");
	}
	
	Event existingEvent = eventRepository
							.findByIdAndOrganizerId(eventId, organizerId)
							.orElseThrow(() -> new EventNotFoundException("Event with ID '" + eventId + "' not found"));
	
	existingEvent.setName(event.getName());
	existingEvent.setStart(event.getStart());
	existingEvent.setEnd(event.getEnd());
	existingEvent.setVenue(event.getVenue());
	existingEvent.setSalesStart(event.getSalesStart());
	existingEvent.setSalesEnd(event.getSalesEnd());
	existingEvent.setStatus(event.getStatus());
	
	Set<UUID> requestTicketTypeIds = event
									   .getTicketTypes()
									   .stream()
									   .map(UpdateTicketTypeRequest::getId)
									   .filter(Objects::nonNull)
									   .collect(Collectors.toSet());
	existingEvent
	  .getTicketTypes()
	  .removeIf(existingTicketType -> !requestTicketTypeIds.contains(existingTicketType.getId()));
	Map<UUID, TicketType> existingTicketTypesIndex = existingEvent
													   .getTicketTypes()
													   .stream()
													   .collect(
														 Collectors.toMap(TicketType::getId, Function.identity()));
	for (UpdateTicketTypeRequest ticketType : event.getTicketTypes()) {
	  if (null == ticketType.getId()) {
		// Create
		TicketType ticketTypeToCreate = new TicketType();
		ticketTypeToCreate.setName(ticketType.getName());
		ticketTypeToCreate.setPrice(ticketType.getPrice());
		ticketTypeToCreate.setDescription(ticketType.getDescription());
		ticketTypeToCreate.setTotalAvailable(ticketType.getTotalAvailable());
		ticketTypeToCreate.setEvent(existingEvent);
		existingEvent
		  .getTicketTypes()
		  .add(ticketTypeToCreate);
	  } else if (existingTicketTypesIndex.containsKey(ticketType.getId())) {
		// Update
		TicketType existingTicketType = existingTicketTypesIndex.get(ticketType.getId());
		existingTicketType.setName(ticketType.getName());
		existingTicketType.setPrice(ticketType.getPrice());
		existingTicketType.setDescription(ticketType.getDescription());
		existingTicketType.setTotalAvailable(ticketType.getTotalAvailable());
	  } else {
		throw new TicketTypeNotFoundException(
		  String.format("Ticket type with ID '%s' does not exist", ticketType.getId()));
	  }
	}
	return eventRepository.save(existingEvent);
	
  }
  
  @Override
  @Transactional
  public void deleteEventForOrganizer(UUID organizerId, UUID eventId) {
	 getEventForOrganizer(organizerId, eventId).ifPresent(eventRepository::delete);
	 
  }
  
  @Override
  public Page<Event> listPublicEvents(Pageable pageable) {
	return eventRepository.findByStatus(EventStatusEnum.PUBLISHED, pageable);
  }
  
  @Override
  public Page<Event> searchPublicEvents(String query, Pageable pageable) {
	return eventRepository.searchEvents(query, pageable);
  }
  
  @Override
  public Optional<Event> getPublicEvent(UUID eventId) {
	return eventRepository.findByIdAndStatus(eventId,  EventStatusEnum.PUBLISHED);
  }
  
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/services/impl/EventServiceImpl.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/services/impl/TicketServiceImpl.java ==========
package com.prp.tickets.services.impl;

import com.prp.tickets.domain.entities.Ticket;
import com.prp.tickets.repositories.TicketRepository;
import com.prp.tickets.services.TicketService;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.util.Optional;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class TicketServiceImpl
  implements TicketService {
  
  private final TicketRepository ticketRepository;
  
  @Override
  public Page<Ticket> listTicketsForUser(UUID userId, Pageable pageable) {
	return ticketRepository.findByPurchaserId(userId, pageable);
  }
  
  @Override
  public Optional<Ticket> getTicketForUser(UUID userId, UUID ticketId) {
	return ticketRepository.findByIdAndPurchaserId(ticketId, userId);
  }
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/services/impl/TicketServiceImpl.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/services/TicketTypeService.java ==========
package com.prp.tickets.services;

import com.prp.tickets.domain.entities.Ticket;

import java.util.UUID;

public interface TicketTypeService {
  Ticket purchaseTicket(UUID userId, UUID ticketTypeId);
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/services/TicketTypeService.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/services/TicketService.java ==========
package com.prp.tickets.services;

import com.prp.tickets.domain.entities.Ticket;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.util.Optional;
import java.util.UUID;

public interface TicketService {
  Page<Ticket> listTicketsForUser(UUID userId, Pageable pageable);
  public Optional<Ticket> getTicketForUser(UUID userId, UUID ticketId);
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/services/TicketService.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/services/TicketValidationService.java ==========
package com.prp.tickets.services;

import com.prp.tickets.domain.entities.TicketValidation;

import java.util.UUID;

public interface TicketValidationService {
  TicketValidation validateTicketByQrCode(UUID qrCodeId);
  
  TicketValidation validateTicketManually(UUID ticketId);
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/services/TicketValidationService.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/services/QrCodeService.java ==========
package com.prp.tickets.services;


import com.prp.tickets.domain.entities.QrCode;
import com.prp.tickets.domain.entities.Ticket;

import java.util.UUID;

public interface QrCodeService {
  
  QrCode generateQrCode(Ticket ticket);
  
  byte[] getQrCodeImageForUserAndTicket(UUID userId, UUID ticketId);
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/services/QrCodeService.java ==========

========== FILE: ./tickets/src/main/java/com/prp/tickets/services/EventService.java ==========
package com.prp.tickets.services;

import com.prp.tickets.domain.CreateEventRequest;
import com.prp.tickets.domain.UpdateEventRequest;
import com.prp.tickets.domain.entities.Event;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.util.Optional;
import java.util.UUID;

public interface EventService {
  Event createEvent(UUID organizerId, CreateEventRequest event);
  Page<Event> listEventsForOrganizer(UUID organizerId, Pageable pageable);
  Optional<Event> getEventForOrganizer(UUID organizerId,  UUID eventId);
  Event updateEventForOrganizer(UUID organizerId, UUID eventId, UpdateEventRequest event);
  void deleteEventForOrganizer(UUID organizerId, UUID eventId);
  Page<Event> listPublicEvents(Pageable pageable);
  Page<Event> searchPublicEvents(String query, Pageable pageable);
  Optional<Event> getPublicEvent(UUID eventId);
}

========== END OF FILE: ./tickets/src/main/java/com/prp/tickets/services/EventService.java ==========

